<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大踏步走</title>
  
  <subtitle>Tabliu&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iqianduan.com/"/>
  <updated>2019-02-14T03:37:55.007Z</updated>
  <id>http://iqianduan.com/</id>
  
  <author>
    <name>Tabliu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6学习笔记（4）- 增强字面量</title>
    <link href="http://iqianduan.com/post/es6-learning-04.html"/>
    <id>http://iqianduan.com/post/es6-learning-04.html</id>
    <published>2018-12-07T03:10:00.000Z</published>
    <updated>2019-02-14T03:37:55.007Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ES6中提供了一种全新的增强字面量的方法，接下来简单的介绍下关于增强字面量的使用。</p></blockquote><h2 id="模版增强字面量"><a href="#模版增强字面量" class="headerlink" title="模版增强字面量"></a>模版增强字面量</h2><p>在日常开发中，字符串的使用随处可见，但在使用过程中经常会有各种限制，比如同一字符串不能折行，不能直接调用已定义的变量等。</p><p>ES6中针对这些做了改进，用两个反引号(<code>)进行标识，在(</code>)内，可以添加字符串，<code>html</code>标签或者变量。</p><h3 id="可以替代常规字符串的定义方式"><a href="#可以替代常规字符串的定义方式" class="headerlink" title="可以替代常规字符串的定义方式"></a>可以替代常规字符串的定义方式</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 常规</span><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">'hello world!'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello world!`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="模版字符串内可以任意换行"><a href="#模版字符串内可以任意换行" class="headerlink" title="模版字符串内可以任意换行"></a>模版字符串内可以任意换行</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> html1 <span class="token operator">=</span> <span class="token string">'&lt;div class="wrap">&lt;h1>我是标题&lt;/h1>&lt;p>我是内容&lt;/p>&lt;/div>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> html2 <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;div class="wrap">  &lt;h1>我是标题&lt;/h1>  &lt;p>我是内容&lt;/p>&lt;/div>`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// &lt;div class="wrap"></span><span class="token comment" spellcheck="true">//   &lt;h1>我是标题&lt;/h1></span><span class="token comment" spellcheck="true">//   &lt;p>我是内容&lt;/p></span><span class="token comment" spellcheck="true">// &lt;/div></span></code></pre><p>使用增强模版字符串，(`)内的换行和空格都会被保留。</p><h3 id="模版字符串内可加入变量占位符"><a href="#模版字符串内可加入变量占位符" class="headerlink" title="模版字符串内可加入变量占位符"></a>模版字符串内可加入变量占位符</h3><p>模版字符串内的变量占位符允许将任何有效的 JS 表达式嵌入到模板字面量中，并将其结果输出为字符串的一部分。</p><p>变量占位符由 <code>${</code>起始，<code>}</code>结束，中间允许放入任意的 JS 表达式，可以是简单的变量，运算符或者函数等。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello world!`</span></span><span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;div class="wrap">  &lt;h1>我是标题&lt;/h1>  &lt;p>我想大声的喊：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p>&lt;/div>`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// &lt;div class="wrap"></span><span class="token comment" spellcheck="true">//   &lt;h1>我是标题&lt;/h1></span><span class="token comment" spellcheck="true">//   &lt;p>我想大声的喊：hello world!&lt;/p></span><span class="token comment" spellcheck="true">// &lt;/div></span></code></pre><h2 id="对象、数组增强字面量"><a href="#对象、数组增强字面量" class="headerlink" title="对象、数组增强字面量"></a>对象、数组增强字面量</h2><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p>我们经常用到的数组或者对象的字面量定义就是一种增强方式，展示直观并可以缩减代码。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字面量定义</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字面量定义</span></code></pre><h3 id="属性和方法的增强"><a href="#属性和方法的增强" class="headerlink" title="属性和方法的增强"></a>属性和方法的增强</h3><p>针对对象中的属性，如果属性名和值相同，可以只保留一个即可；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">:</span> router<span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中的 <code>router</code> 则可以进行简写：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// router: router,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于对象中的方法，也可以进行相应简写，将<code>: function</code>省略。比如 <code>Vue</code>框架中就采用了这样的形式：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// data: function () { ... }</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// mounted: function () { ... }</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// created: function () { ... }</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面看一个实例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">CreateBookShop</span><span class="token punctuation">(</span>inventory<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    inventory<span class="token punctuation">:</span> inventory<span class="token punctuation">,</span>    inventoryValue<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inventory<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>total<span class="token punctuation">,</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> total <span class="token operator">+</span> book<span class="token punctuation">.</span>price<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    priceForTitle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> book<span class="token punctuation">.</span>title <span class="token operator">===</span> title<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> inventroy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'Vue'</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'Angular'</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token number">15</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">let</span> bookShop <span class="token operator">=</span> <span class="token function">CreateBookShop</span><span class="token punctuation">(</span>inventroy<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bookShop<span class="token punctuation">.</span><span class="token function">inventoryValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bookShop<span class="token punctuation">.</span><span class="token function">priceForTitle</span><span class="token punctuation">(</span><span class="token string">'Vue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过字面量增强可以对代码进行简化如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">CreateBookShop</span><span class="token punctuation">(</span>inventory<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    inventory<span class="token punctuation">,</span>    inventoryValue <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inventory<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> book<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> total <span class="token operator">+</span> book<span class="token punctuation">.</span>price<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    priceForTitle <span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inventory<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>book <span class="token operator">=</span><span class="token operator">></span> book<span class="token punctuation">.</span>title <span class="token operator">===</span> title<span class="token punctuation">)</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;ES6中提供了一种全新的增强字面量的方法，接下来简单的介绍下关于增强字面量的使用。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;模版增强字面量&quot;&gt;&lt;a href=&quot;#模版增强字面量&quot; class=&quot;headerlink&quot; title=&quot;模版增强字
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
      <category term="ES6" scheme="http://iqianduan.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记（3）- 箭头函数的使用</title>
    <link href="http://iqianduan.com/post/es6-learning-03.html"/>
    <id>http://iqianduan.com/post/es6-learning-03.html</id>
    <published>2018-12-06T07:45:00.000Z</published>
    <updated>2018-12-06T11:28:19.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ES6中提供了一种全新的函数写法叫箭头函数，接下来简单的介绍下关于箭头函数的使用。</p></blockquote><h2 id="箭头函数的定义"><a href="#箭头函数的定义" class="headerlink" title="箭头函数的定义"></a>箭头函数的定义</h2><p>找了一圈也没有一个特别官方的定义，从字面意思就可以理解：使用箭头<code>=&gt;</code>形式来进行函数使用。</p><h2 id="箭头函数的使用"><a href="#箭头函数的使用" class="headerlink" title="箭头函数的使用"></a>箭头函数的使用</h2><p>常规方式定义一个函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> func1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello World!</span></code></pre><p>使用箭头函数来定义：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> func2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello World!</span></code></pre><p>从形式上看，使用箭头函数的变化：</p><ul><li>去掉了<code>function</code> 定义头；</li><li>在<code>()</code>和<code>{}</code>中间增加了箭头函数的定义符号<code>=&gt;</code>。</li></ul><h2 id="箭头函数的作用"><a href="#箭头函数的作用" class="headerlink" title="箭头函数的作用"></a>箭头函数的作用</h2><h3 id="简化代码"><a href="#简化代码" class="headerlink" title="简化代码"></a>简化代码</h3><p>使用箭头函数可以有效的简化代码，除了常规的可以省略<code>function</code>，在不同情况下有以下简化：</p><p>函数中有形参依然要放在<code>()</code>中，如果只有一个，<code>()</code>可以省略。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 多个形参 * */</span><span class="token comment" spellcheck="true">// 常规</span><span class="token keyword">let</span> adder <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">adder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span><span class="token comment" spellcheck="true">// ES6 arrow function</span><span class="token keyword">let</span> adder <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">adder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span><span class="token comment" spellcheck="true">/** * 一个形参 * */</span><span class="token comment" spellcheck="true">// 常规</span><span class="token keyword">let</span> circularArea <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pi <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">circularArea</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12.56</span><span class="token comment" spellcheck="true">// ES6 arrow function</span><span class="token keyword">let</span> circularArea <span class="token operator">=</span> r <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pi <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">circularArea</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12.56</span></code></pre><p>如果函数中有多个表达式需要用<code>{}</code>括起来，如果只有一个，可以省略<code>{}</code>。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 只有一个表达式，省略括号 * */</span><span class="token comment" spellcheck="true">// 常规</span><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[2, 4, 6]</span><span class="token comment" spellcheck="true">// ES6 arrow function</span><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>num <span class="token operator">=</span><span class="token operator">></span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[2, 4, 6]</span></code></pre><h3 id="不改变this指向"><a href="#不改变this指向" class="headerlink" title="不改变this指向"></a>不改变<code>this</code>指向</h3><p>简单理解就是：箭头函数没有自己的<code>this</code>指向，它只是继承其父级作用域下的<code>this</code>指向，并且不会再被改变。</p><p>我们看一个实例：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 常规</span><span class="token keyword">let</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  height<span class="token punctuation">:</span> <span class="token string">'160cm'</span><span class="token punctuation">,</span>  info<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我今年'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'岁了，身高是'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xiaoming<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我今年undefined岁了，身高是undefined</span></code></pre><p>为什么上例中的结果会输出<code>undefined</code>呢？这是我们初学者经常搞不懂的地方，其原因是<code>setTimeout</code>方式是<code>window</code>上的方法，在使用时其作用域被指向了<code>window</code>全局，所以找不到在<code>xiaoming</code>这个对象里定义的<code>this.age</code>和<code>this.height</code>。</p><p>常规的解决方法是人为的把<code>this</code>的作用域进行保留指向：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  height<span class="token punctuation">:</span> <span class="token string">'160cm'</span><span class="token punctuation">,</span>  info<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我今年'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'岁了，身高是'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>另外一种方法就是使用箭头函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  height<span class="token punctuation">:</span> <span class="token string">'160cm'</span><span class="token punctuation">,</span>  info<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我今年'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'岁了，身高是'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xiaoming<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过使用箭头函数，使<code>this</code>的很好的指向到了继承的父级对象中，避免<code>this</code>乱指向的问题。</p><h2 id="箭头函数的缺陷"><a href="#箭头函数的缺陷" class="headerlink" title="箭头函数的缺陷"></a>箭头函数的缺陷</h2><p>使用箭头函数带来了很多便利的地方，那有没有不好的地方呢？</p><p>还是回到上例中，细心的同学可能会问，为什么定义<code>info</code>方法还是用的<code>function</code>的方式，不换成箭头函数的形式呢？</p><p>其实我是换了的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  height<span class="token punctuation">:</span> <span class="token string">'160cm'</span><span class="token punctuation">,</span>  info<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我今年'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'岁了，身高是'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xiaoming<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这么执行后发现还是会输出<code>undefined</code>，百思不得其解。在网上冲浪中才了解到原来使用箭头换上定义方法后，对象属性的<code>()</code>无法封闭作用域，在找不到作用域情况下此时的<code>this</code>又指向到了全局。虽然对更深层的原因还不太理解，需要在未来的实践中继续探索，但一定要先记住：<strong><em>不能用箭头函数定义对象的方法</em></strong>。</p><p>还有其他场景下不适合使用箭头函数的，后继不断更新。</p><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;ES6中提供了一种全新的函数写法叫箭头函数，接下来简单的介绍下关于箭头函数的使用。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;箭头函数的定义&quot;&gt;&lt;a href=&quot;#箭头函数的定义&quot; class=&quot;headerlink&quot; title=&quot;箭头函数的
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
      <category term="ES6" scheme="http://iqianduan.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记（2）- 使用Let和Const</title>
    <link href="http://iqianduan.com/post/es6-learning-02.html"/>
    <id>http://iqianduan.com/post/es6-learning-02.html</id>
    <published>2018-12-05T03:22:00.000Z</published>
    <updated>2018-12-05T08:44:55.733Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JS中一般定义变量或常量都使用<code>var</code>来定义，在<code>ES6</code>中引入了<code>let</code>和<code>const</code>，这两个定义方法和之前的<code>var</code>有什么区别呢，我们来了解下。</p></blockquote><h2 id="let变量定义"><a href="#let变量定义" class="headerlink" title="let变量定义"></a><code>let</code>变量定义</h2><p><code>let</code>和<code>var</code>的主要区别体现在<strong><em>作用域</em></strong>上。通过<code>var</code>定义的变量，作用域是整个封闭函数，为函数作用域，是全域的 ；而<code>let</code>定义的变量作用域是在块级或是子块中，被规定为块作用域，块作用域要比函数作用范围要小一些。但是如果两者既没在函数中，也没在块作用域中定义，那么两者都属于全局作用域。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// var</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">// let</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: b is not defined</span></code></pre><p>在了解他们区别之前，我们先要了解一下函数预编译的几个概念：</p><p>预编译原则：</p><ul><li>函数声明：<strong><em>整体提升</em></strong>；</li><li>变量： <strong><em>声明提升</em></strong>；</li></ul><p>预编译过程：</p><ol><li>创建<code>AO</code>对象：<code>Activation Object</code>（执行期上下文，作用域）；</li><li>找形参和变量声明，将形参名和变量作为<code>AO</code>属性名，值为<code>undefined</code>；</li><li>将实参值和形参统一，把实参的值赋给形参；</li><li>在函数体里面找函数声明，值赋予函数体。</li></ol><p>实例说明：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 预编译：发生在函数执行的前一刻</span><span class="token comment" spellcheck="true">// 找AO</span>AO <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//第3步：1；第4步：function a() {}。执行后第1次：function a() {}；第2次：123；第3次：123</span>  b<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//执行后function () {}</span>  d<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//执行后function d() {}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 最后的执行结果：</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// function a() {}</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//123</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//123</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// function () {}</span>  <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// function d() {}</span><span class="token punctuation">}</span></code></pre><p>如果使用let定义呢，我们试试：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>页面执行结果：报错：<code>Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared</code>，至于是什么原因，看完下面的内容您自然明白。</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>在全局作用域下定义变量，使用<code>var</code>和<code>let</code>比较相似。但<code>var</code>定义的变量可以当作全局<code>window</code>的一个属性来用，<code>let</code>定义的变量则不可以。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>在函数作用域下定义变量，使用<code>var</code>和<code>let</code>是相同的，在该函数整体内都可以使用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>在块级作用域下定义变量，使用<code>var</code>不仅可以在该块级内使用，还可以在该块关联的上下级使用；<br>而<code>let</code>只可以在该块级内使用，超出使用会报错。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// `Uncaught ReferenceError: j is not defined`</span></code></pre><h3 id="变量重新声明"><a href="#变量重新声明" class="headerlink" title="变量重新声明"></a>变量重新声明</h3><p>使用<code>let</code>声明的变量，在同一作用域内不可以再进行同名变量定义；<br>而使用<code>var</code>没有限制。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3]</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// `Uncaught SyntaxError: Identifier 'b' has already been declared`</span></code></pre><h2 id="const常量定义"><a href="#const常量定义" class="headerlink" title="const常量定义"></a><code>const</code>常量定义</h2><h3 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h3><p>和<code>let</code>一样，<code>const</code>定义的常量也只能在块级作用域内使用，且不可以再进行同名变量定义。</p><h3 id="声明赋值"><a href="#声明赋值" class="headerlink" title="声明赋值"></a>声明赋值</h3><p><code>let</code>定义变量，可以先声明不赋值，在使用的时候再进行赋值；<br><code>const</code>则不可以，必须在定义的时候进行声明和赋值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span><span class="token keyword">const</span> pi<span class="token punctuation">;</span>pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// `Uncaught SyntaxError: Missing initializer in const declaration`</span></code></pre><h3 id="重新赋值"><a href="#重新赋值" class="headerlink" title="重新赋值"></a>重新赋值</h3><p><code>let</code>声明的变量，可以重新赋值，而且对变量类型没有要求；<br><code>const</code>定义的常量不可以改变类型，也不能直接进行重新赋值操作，只能通过相应类型提供的方法进行修改。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3]</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// `Uncaught TypeError: Assignment to constant variable.`</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4]</span></code></pre><p>综合：相对<code>var</code>，使用<code>let</code>和<code>const</code>比较严谨，可以避免一些小错误的发生，而且可以更快定位错误产生的原因。通过<code>let</code>和<code>const</code>的使用，可以有效规范代码，提高团队合作中代码的可读性，值得推荐使用。</p><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JS中一般定义变量或常量都使用&lt;code&gt;var&lt;/code&gt;来定义，在&lt;code&gt;ES6&lt;/code&gt;中引入了&lt;code&gt;let&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;，这两个定义方法和之前的&lt;code&gt;var&lt;/code&gt;有什么区别呢
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
      <category term="ES6" scheme="http://iqianduan.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记（1）- 数组方法</title>
    <link href="http://iqianduan.com/post/es6-learning-01.html"/>
    <id>http://iqianduan.com/post/es6-learning-01.html</id>
    <published>2018-11-30T02:40:00.000Z</published>
    <updated>2018-12-05T03:22:06.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6中的数组方法"><a href="#ES6中的数组方法" class="headerlink" title="ES6中的数组方法"></a>ES6中的数组方法</h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a><code>forEach()</code></h3><blockquote><p>对数组进行遍历，不改变原数组；<br>无返回值。</p></blockquote><p>应用场景：对给定的数组进行遍历输出</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// ES5 for循环遍历数组</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colors<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ES6 forEach方法</span>colors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>说明：</p><ul><li><p><code>forEach()</code>方法<code>()</code>中需要放一个迭代器函数，并需要有一个接收数据的参数；</p></li><li><p>迭代器函数可以直接在<code>forEach()</code>方法中定义，也可以外部定义后引用使用。</p></li></ul><p>练习：遍历数组中的值并将值进行相加。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES5 for循环遍历数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sum <span class="token operator">+</span><span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6 forEach方法</span>numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  sum <span class="token operator">+</span><span class="token operator">=</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="map"><a href="#map" class="headerlink" title="map()"></a><code>map()</code></h3><blockquote><p>对给定数组进行处理并返回一个新数组；<br>不改变原数组值。</p></blockquote><p>应用场景1：对给定数组中的值进行乘以2并返回一个新数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES5 for循环遍历数组</span><span class="token keyword">var</span> newNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  newNumbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6 map方法</span><span class="token keyword">var</span> esNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>esNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/demo/es6_map.jpg" alt="map方法"><br>(图片来源于米斯特吴的网络课程)</p><p>说明：</p><ul><li><p><code>map()</code>方法<code>()</code>中同样需要放一个迭代器函数，并需要有一个接收数据的参数；</p></li><li><p><code>map()</code>方法必须使用<code>return</code>进行返回值；如果不给，返回的新数组中的值将是<code>undefined</code>。</p></li></ul><p>应用场景2：对给定对象数组进行处理，将数组中指定的对象值存储到一个新数组中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'BMW'</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token string">'60w'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'BENZ'</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token string">'50w'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'JEEP'</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token string">'40w'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> carPrices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES5 for循环遍历数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  carPrices<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>carPrices<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6 map方法</span><span class="token keyword">var</span> esCarPrices <span class="token operator">=</span> cars<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> car<span class="token punctuation">.</span>price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>esCarPrices<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a><code>filter()</code></h3><blockquote><p>通过对给定数组中的值进行过滤处理并将符合条件的返回到一个新数组；<br>不改变原数组值。</p></blockquote><p>应用：给定一个数组，根据给定条件，将符合条件的值返回一个新数组</p><p>条件：1、类型是水果；2、有库存；3、价格不大于4；</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> products <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'apple'</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'fruit'</span><span class="token punctuation">,</span>    stock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'cucumber'</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'vegetable'</span><span class="token punctuation">,</span>    stock<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token number">15</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'orange'</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'fruit'</span><span class="token punctuation">,</span>    stock<span class="token punctuation">:</span> <span class="token number">13</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'celery'</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'vegetable'</span><span class="token punctuation">,</span>    stock<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token number">15</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES5 for循环遍历数组</span><span class="token keyword">var</span> newProducts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> products<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'fruit'</span> <span class="token operator">&amp;&amp;</span> products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stock <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    newProducts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>products<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newProducts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ES6 filter方法</span><span class="token keyword">var</span> esNewProducts <span class="token operator">=</span> products<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> product<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'fruit'</span> <span class="token operator">&amp;&amp;</span> product<span class="token punctuation">.</span>stock <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> product<span class="token punctuation">.</span>price <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>esNewProducts<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/demo/es6_filter.jpg" alt="filter方法"><br>(图片来源于米斯特吴的网络课程)</p><p>说明：</p><ul><li><p><code>filter()</code>方法<code>()</code>中同样需要放一个迭代器函数，并需要有一个接收数据的参数；</p></li><li><p><code>filter()</code>方法必须使用<code>return</code>进行返回值；如果不给，返回的新数组中的值将是<code>undefined</code>。</p></li></ul><p>应用场景2：给定一个数组，将该数组中属性值满足另外一个数组或者对象的指定值的项返回一个新数组：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> auto <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span>  created<span class="token punctuation">:</span> <span class="token number">2010</span><span class="token punctuation">}</span><span class="token keyword">var</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'BMW'</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token string">'60w'</span><span class="token punctuation">,</span>    dealer<span class="token punctuation">:</span> <span class="token string">'auto'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'BENZ'</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token string">'50w'</span><span class="token punctuation">,</span>    dealer<span class="token punctuation">:</span> <span class="token string">'mofa'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'JEEP'</span><span class="token punctuation">,</span>    price<span class="token punctuation">:</span> <span class="token string">'40w'</span><span class="token punctuation">,</span>    dealer<span class="token punctuation">:</span> <span class="token string">'auto'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newCars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6 filter方法</span><span class="token keyword">var</span> newCars <span class="token operator">=</span> cars<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> car<span class="token punctuation">.</span>dealer <span class="token operator">===</span> auto<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newCars<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find()"></a><code>find()</code></h3><blockquote><p>在给定数组中找到符合条件的值即返回<br>不改变原数组值。</p></blockquote><p>应用：给定一个数组，根据给定条件，将符合条件的值返回</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 给定一个数组，根据给定条件，将符合条件的值返回 */</span><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Alex'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token string">'12'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Bill'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token string">'20'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Alex'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token string">'1'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES5 for循环遍历数组</span><span class="token keyword">var</span> user<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> users<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Alex'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    user <span class="token operator">=</span> users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 阻止继续查找</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ES6 find方法</span><span class="token keyword">var</span> user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>  user<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Alex'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/demo/es6_find.jpg" alt="find方法"><br>(图片来源于米斯特吴的网络课程)</p><p><code>find()</code>方法和<code>filter()</code>方法的区别：</p><ul><li><p>相同点：都是通过给定调用函数条件对指定数组进行查找并返回，找不到返回<code>undefined</code>；</p></li><li><p>不同点：find()<code>方法返回的是该数组中符合调用函数条件的第一个值或者对象，找到即停止；</code>filter()`方法返回的是所有符合条件的值或者对象组成的新数组。</p></li></ul><h3 id="every-和some"><a href="#every-和some" class="headerlink" title="every()和some()"></a><code>every()和some()</code></h3><blockquote><p>every()方法：在数组中根据给定条件对数组进行判定，如果所有条件都符合则返回真(<code>true</code>)，否则返回假(<code>false</code>)，相当于逻辑运算中的<code>&amp;&amp;与</code>；<br>some()方法：在数组中根据给定条件对数组进行判定，只要有条件符合则返回真(<code>true</code>)，全部没有才会返回假(<code>false</code>)，相当于逻辑运算中的<code>||或</code>；<br>必须有返回值。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 给定一个包含数字的数组，判断每个数字是否都能被2整除 */</span><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> every <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> some <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES5 for循环遍历数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    every <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    every <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    some <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>every<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>some<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// ES6 every()方法</span>every <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>every<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>some <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>some<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p><img src="/demo/es6_every.jpg" alt="every方法"><br>(图片来源于米斯特吴的网络课程)</p><p><img src="/demo/es6_some.jpg" alt="some方法"><br>(图片来源于米斯特吴的网络课程)</p><p><code>every()</code>方法和<code>some()</code>方法的区别：</p><ul><li><p><code>every()</code>方法：一假即假；</p></li><li><p><code>some()</code>方法：一真即真；</p></li><li><p>一旦<code>every()</code>和<code>some()</code>方法确认返回值就会停止遍历数组。</p></li></ul><p>应用：对注册页面，判断所有的input内容都不为空</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Field</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>Field<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>validate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">(</span><span class="token string">'shanyang'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    email <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">(</span><span class="token string">'shanyang@hotmail.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    telphone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">(</span><span class="token string">'18888888888'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> email<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> telphone<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6 every()方法</span><span class="token keyword">var</span> inputs <span class="token operator">=</span> <span class="token punctuation">[</span>username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> telphone<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> inputsValidate <span class="token operator">=</span> inputs<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputsValidate<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a><code>reduce()</code></h3><blockquote><p>根据指定的回调函数将数组元素进行组合并生成单个值返回；<br>必须有返回值。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 数组中数字进行累加 */</span><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES5 for循环遍历数组</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sum <span class="token operator">+</span><span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6 reduce()方法</span><span class="token keyword">var</span> total <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> prev <span class="token operator">+</span> number<span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>说明：</p><ul><li><p><code>reduce()</code>方法的语法：<code>arr.reduce(function(prev, item, index, array) { return prev }, initValue)</code>；</p></li><li><p><code>reduce()</code>方法中必须有两个返回值：</p><ul><li><p><code>prev</code>：初始项，必须。每次运算后将<code>prev</code>和<code>item</code>的运算赋给自身，最后作为返回值返回；</p></li><li><p><code>item</code>：当前项，必须；</p></li><li><p><code>index</code>：当前项的索引值，可选；</p></li><li><p><code>array</code>：当前数组，可选；</p></li><li><p><code>initValue</code>：初始项的初始值，可选。如果初始值为空，<code>prev</code>默认接收该数组的第一项的值为初始值，<code>item</code>变为该数组的第二项的值。</p></li></ul></li></ul><p>使用<code>reduce()</code>方法可以替代数组中很多其他方法，可以根据实际情况来使用。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 应用：将数组中对象的某个属性抽离到另外一个数组中 * */</span><span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// ES6 map()方法</span>newColors <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> color<span class="token punctuation">.</span>color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newColors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6 reduce()方法</span>newColors <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newColors<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在本例中，<code>prev</code>这个初始项因为用到了数组的<code>push()</code>方法，所以必须要定义<code>initValue</code>初始值为数组值，否则会报错。</p><p>综合应用</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 应用：判断给定字符串中的括号是否对称 * '(())()' // ture * '(((00))' //false * ')()(()' //false */</span><span class="token keyword">function</span> <span class="token function">matchBrace</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">!</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> chat<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prev <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> prev<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>chat <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">++</span> prev<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>chat <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">--</span> prev<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">matchBrace</span><span class="token punctuation">(</span><span class="token string">'(())()()(())'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES6中的数组方法&quot;&gt;&lt;a href=&quot;#ES6中的数组方法&quot; class=&quot;headerlink&quot; title=&quot;ES6中的数组方法&quot;&gt;&lt;/a&gt;ES6中的数组方法&lt;/h2&gt;&lt;h3 id=&quot;forEach&quot;&gt;&lt;a href=&quot;#forEach&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
      <category term="ES6" scheme="http://iqianduan.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue 学习笔记(5) - 理解vue-router中的router、routes和$route</title>
    <link href="http://iqianduan.com/post/vue-learning-05.html"/>
    <id>http://iqianduan.com/post/vue-learning-05.html</id>
    <published>2018-11-27T01:30:00.000Z</published>
    <updated>2018-11-28T07:17:38.060Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>用<code>Vue.js + Vue Router</code>创建单页应用，是非常简单的。在使用<code>Vue Router</code>过程中，我们经常会遇到<code>router</code>、<code>routes</code>和<code>$route</code>这些名称，对于初学者来讲很容易混淆，接下来，通过官方文档和实例一起学习下。</p></blockquote><h2 id="vue-router的安装"><a href="#vue-router的安装" class="headerlink" title="vue-router的安装"></a><code>vue-router</code>的安装</h2><blockquote><p>可以通过引用或者<code>npm</code>下载的方式来安装</p></blockquote><pre class=" language-bash"><code class="language-bash">// 引入cdn地址<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/vue-router@2.0.0/dist/vue-router.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>// 通过npm安装<span class="token function">npm</span> <span class="token function">install</span> vue-router</code></pre><p>安装后需要引入和使用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span></code></pre><h2 id="vue-router的使用"><a href="#vue-router的使用" class="headerlink" title="vue-router的使用"></a><code>vue-router</code>的使用</h2><h3 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue-router/dist/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello, vue-router!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>router<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 定义或导入路由组件</span>  <span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div class="foo">Foo&lt;/div>`</span></span> <span class="token punctuation">}</span>  <span class="token keyword">const</span> Bar <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div class="bar">Bar&lt;/div>`</span></span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 定义路由</span>  <span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/foo'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Foo    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/Bar'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Bar    <span class="token punctuation">}</span>  <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 定义路由器，创建`router`实例，传`routes`配置</span>  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">:</span> routes  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 创建跟实例并挂载路由器，通过`router`装载路由器</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    router<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue-router/dist/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello, vue-router!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>router<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/lilei<span class="token punctuation">"</span></span> <span class="token attr-name">exact</span><span class="token punctuation">></span></span>lilei<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/lucii<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>lucii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 定义或导入路由组件</span>  <span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div class="user">{{ $route.params.username }}&lt;/div>`</span></span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 定义路由</span>  <span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/user/:username'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> User    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 'router-link-active': 'active'</span>  <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 定义路由器，创建`router`实例，然后传`routes`配置</span>  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">:</span> routes  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 创建跟实例并挂载路由器，通过`router`装载路由器</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    router<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="vue-router中的几个概念"><a href="#vue-router中的几个概念" class="headerlink" title="vue-router中的几个概念"></a><code>vue-router</code>中的几个概念</h2><h3 id="router"><a href="#router" class="headerlink" title="router"></a><code>router</code></h3><p><code>router</code>是<code>VueRouter</code>的实例。其本质是<code>Vue</code>实例下的一个对象属性，通过挂载在<code>Vue</code>使创建的路由在<code>Vue</code>使用。</p><p>常用<code>router</code>定义：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 配置路由模式，可选值："hash" | "history" | "abstract"，默认值："hash" (浏览器环境) | "abstract" (Node.js 环境)</span>  base<span class="token punctuation">:</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 应用的基路径，默认值: "/"</span>  routes<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Array<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 路由定义</span>  linkActiveClass<span class="token punctuation">:</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 全局配置 &lt;router-link> 的默认“激活`class`类名”，默认值: "router-link-active"</span>  linkExactActiveClass<span class="token punctuation">:</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 全局配置 &lt;router-link> 精确激活的默认的`class`，默认值: "router-link-exact-active"</span>  scrollBehavior<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Function<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置路由跳转的滚动行为</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="route"><a href="#route" class="headerlink" title="$route"></a><code>$route</code></h3><p><code>$route</code>是单个的路由对象，表示当前激活的路由的状态信息，包含了当前<code>URL</code>解析得到的信息，还有<code>URL</code>匹配到的路由记录(<code>route records</code>)。</p><p>路由对象是不可变 (<code>immutable</code>) 的，每次成功的导航后都会产生一个新的对象。</p><p>路由对象出现在多个地方:</p><ul><li><p>在组件内，即<code>this.$route</code>;</p></li><li><p>在<code>$route</code>观察者回调内</p></li><li><p><code>router.match(location)</code>的返回值</p></li><li><p>导航守卫的参数：</p></li></ul><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// `to` 和 `from` 都是路由对象</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li><code>scrollBehavior</code>方法的参数:</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  scrollBehavior <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// `to` 和 `from` 都是路由对象</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>$route</code>包含的属性：</p><pre class=" language-js"><code class="language-js">$route <span class="token operator">=</span> <span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 对应当前路由的路径，总是解析为绝对路径，如 "/foo/bar"</span>  params<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一个`key/value`对象，包含了动态片段和全匹配片段，如果没有路由参数，就是一个空对象</span>  query<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一个`key/value`对象，表示`URL`查询参数</span>  hash<span class="token punctuation">:</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当前路由的`hash 值 (带 #)`，如果没有`hash`值，则为空字符串</span>  fullPath<span class="token punctuation">:</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 完成解析后的`URL`，包含查询参数和`hash`的完整路径</span>  matched<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Array<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 包含当前路由的所有嵌套路径片段的路由记录</span>  name<span class="token punctuation">:</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当前路由的名称，如果有的话</span>  redirectedFrom<span class="token punctuation">:</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 如果存在重定向，即为重定向来源的路由的名字。</span><span class="token punctuation">}</span></code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9" target="_blank" rel="noopener">Router 构建选项</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;用&lt;code&gt;Vue.js + Vue Router&lt;/code&gt;创建单页应用，是非常简单的。在使用&lt;code&gt;Vue Router&lt;/code&gt;过程中，我们经常会遇到&lt;code&gt;router&lt;/code&gt;、&lt;code&gt;routes&lt;/code&gt;和&lt;
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
      <category term="vue" scheme="http://iqianduan.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（24）- 日期对象-Date()</title>
    <link href="http://iqianduan.com/post/js-learning-24.html"/>
    <id>http://iqianduan.com/post/js-learning-24.html</id>
    <published>2018-11-22T01:56:00.000Z</published>
    <updated>2018-11-22T02:12:36.011Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/course/231577" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="日期对象的定义"><a href="#日期对象的定义" class="headerlink" title="日期对象的定义"></a>日期对象的定义</h2><blockquote><p>系统提供的返回当天的日期和时间的方法；<br>包含了一些列方法；</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Thu Nov 22 2018 09:59:56 GMT+0800 (中国标准时间)</span></code></pre><p>注释：<code>Date()</code>对象会自动把当前日期和时间保存为其初始值</p><h2 id="日期对象的属性"><a href="#日期对象的属性" class="headerlink" title="日期对象的属性"></a>日期对象的属性</h2><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><blockquote><p>返回对创建此对象的<code>Date()</code>函数的引用。</p></blockquote><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><blockquote><p>使您有能力向对象添加属性和方法。</p></blockquote><h2 id="日期对象的方法"><a href="#日期对象的方法" class="headerlink" title="日期对象的方法"></a>日期对象的方法</h2><h3 id="Date"><a href="#Date" class="headerlink" title="Date()"></a>Date()</h3><blockquote><p>返回当日的日期和时间；<br>返回类型是字符串。</p></blockquote><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"Thu Nov 22 2018 09:59:56 GMT+0800 (中国标准时间)"</span></code></pre><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/course/231577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web前端开发之JavaScript精英课堂【渡一
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（23）- DOM的基本操作</title>
    <link href="http://iqianduan.com/post/js-learning-23.html"/>
    <id>http://iqianduan.com/post/js-learning-23.html</id>
    <published>2018-11-21T08:00:00.000Z</published>
    <updated>2018-11-22T01:40:52.520Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/course/231577" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="增加节点操作"><a href="#增加节点操作" class="headerlink" title="增加节点操作"></a>增加节点操作</h2><h3 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h3><blockquote><p>创建元素节点；<br>创建后并不会添加到DOM中去，需要通过<code>appendChild()</code>方法来插入；</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="document-createTextNode"><a href="#document-createTextNode" class="headerlink" title="document.createTextNode()"></a>document.createTextNode()</h3><blockquote><p>创建文本节点；<br>创建后并不会添加到DOM中去，同样需要通过<code>appendChild()</code>方法来插入；</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="document-createComment"><a href="#document-createComment" class="headerlink" title="document.createComment()"></a>document.createComment()</h3><blockquote><p>创建注释节点；<br>创建后并不会添加到DOM中去，同样需要通过<code>appendChild()</code>方法来插入；</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> comment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span><span class="token string">'this is comment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="修改节点操作"><a href="#修改节点操作" class="headerlink" title="修改节点操作"></a>修改节点操作</h2><h3 id="appendChild-方法"><a href="#appendChild-方法" class="headerlink" title="appendChild()方法"></a>appendChild()方法</h3><blockquote><p>语法为：<code>PARENTNODE.appendChild(node)</code>，插入元素<code>node</code>到父级元素<code>PARENTNODE</code>的最后位置；<br>对DOM中已经存在的节点使用<code>appendChild()</code>方法相当于是剪切操作；</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> comment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span><span class="token string">'this is comment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>span<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>span<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="insertBefore-方法"><a href="#insertBefore-方法" class="headerlink" title="insertBefore()方法"></a>insertBefore()方法</h3><blockquote><p>语法为：<code>PARENTNODE.insertBefore(a, b)</code>，相当于是<code>PARENTNODE</code> <code>inset</code> <code>a</code> <code>before</code> <code>b</code>；<br>对DOM中已经存在的节点使用<code>insertBefore()</code>方法也相当于是剪切操作，前提是指定的节点必须存在。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> comment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span><span class="token string">'this is comment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>comment<span class="token punctuation">,</span> span<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="删除节点操作"><a href="#删除节点操作" class="headerlink" title="删除节点操作"></a>删除节点操作</h2><h3 id="removeChild-方法"><a href="#removeChild-方法" class="headerlink" title="removeChild()方法"></a>removeChild()方法</h3><blockquote><p>语法为：<code>parent.removeChild(child)</code>，相当于<code>parent</code>对<code>child</code>执行剪切操作。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> comment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span><span class="token string">'this is comment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>span<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>span<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h3><blockquote><p>语法为：<code>child.remove()，这是</code>ES5<code>的新语法，对自身执行删除方法，返回</code>undefined`。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> comment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span><span class="token string">'this is comment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>span<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>span<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>text<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>comment<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="替换节点操作"><a href="#替换节点操作" class="headerlink" title="替换节点操作"></a>替换节点操作</h2><h3 id="replaceChild-方法"><a href="#replaceChild-方法" class="headerlink" title="replaceChild()方法"></a>replaceChild()方法</h3><blockquote><p>语法为：<code>PARENTNODE.replaceChild(new, origin)，相当于</code>PARENTNODE<code>用新节点</code>new<code>替换原有子节点</code>origin<code>； 完成后返回原有子节点</code>origin<code>，相当于把子节点</code>origin`进行了剪切操作。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> comment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span><span class="token string">'this is comment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>span<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>span<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> span<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="元素节点的属性"><a href="#元素节点的属性" class="headerlink" title="元素节点的属性"></a>元素节点的属性</h2><h3 id="innerHTMl"><a href="#innerHTMl" class="headerlink" title="innerHTMl()"></a>innerHTMl()</h3><blockquote><p>改变元素标签的内容，其内容是<code>HTML</code>结构；<br>可读也可写。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;span style="color: #f00; font-size:20px;">红色&lt;/span>'</span><span class="token punctuation">;</span></code></pre><h3 id="innerText"><a href="#innerText" class="headerlink" title="innerText()"></a>innerText()</h3><blockquote><p>可以读写指定标签内的文本内容，包括标签所有内子标签的文本内容；<br>老版本火狐浏览器不兼容</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;span style="color: #f00; font-size:16px;">红色&lt;/span>'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'pppp'</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'span'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//123abc红色 ppppspan</span>div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'div'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//div</span></code></pre><p>注意：如果想要使用<code>innerText</code>属性，一定要确认是否包含子元素，否则会把所有元素内容的文本和子元素全部替换。</p><h3 id="textContent"><a href="#textContent" class="headerlink" title="textContent()"></a>textContent()</h3><blockquote><p>功能同<code>innerText</code>，火狐浏览器兼容，低版本IE浏览器不兼容。</p></blockquote><h2 id="元素节点的方法"><a href="#元素节点的方法" class="headerlink" title="元素节点的方法"></a>元素节点的方法</h2><h3 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute()"></a>setAttribute()</h3><blockquote><p>写操作，给指定标签添加属性和属性内容。<br>可以自定义系统没有提供的属性</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'demo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'class1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&lt;div id="demo" class="class1">&lt;/div></span></code></pre><h3 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute()"></a>getAttribute()</h3><blockquote><p>读操作，返回标签某个属性的属性值。<br>可以自定义系统没有提供的属性</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'demo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'class1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//demo</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//class1</span></code></pre><h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><h3 id="封装一个insertAfter-方法，功能类似于insertBefore"><a href="#封装一个insertAfter-方法，功能类似于insertBefore" class="headerlink" title="封装一个insertAfter()方法，功能类似于insertBefore()"></a>封装一个<code>insertAfter()</code>方法，功能类似于<code>insertBefore()</code></h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>strong<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Element<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>insertAfter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// var sibling = origin.nextElementSibling;</span>    <span class="token comment" spellcheck="true">// if (sibling == null) {</span>    <span class="token comment" spellcheck="true">//   this.appendChild(target);</span>    <span class="token comment" spellcheck="true">// } else {</span>    <span class="token comment" spellcheck="true">//   this.insertBefore(target, sibling);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>origin <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastElementChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> origin<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> strong <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"strong"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'span'</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="对指定标签组进行标签逆序操作"><a href="#对指定标签组进行标签逆序操作" class="headerlink" title="对指定标签组进行标签逆序操作"></a>对指定标签组进行标签逆序操作</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>strong<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Element<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>insertAfter <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// var sibling = origin.nextElementSibling;</span>    <span class="token comment" spellcheck="true">// if (sibling == null) {</span>    <span class="token comment" spellcheck="true">//   this.appendChild(target);</span>    <span class="token comment" spellcheck="true">// } else {</span>    <span class="token comment" spellcheck="true">//   this.insertBefore(target, sibling);</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>origin <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastElementChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> origin<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  Element<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>reverseElement <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> children <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> strong <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'strong'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'span'</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span><span class="token function">reverseElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/course/231577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web前端开发之JavaScript精英课堂【渡一
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（22）- 初识DOM</title>
    <link href="http://iqianduan.com/post/js-learning-22.html"/>
    <id>http://iqianduan.com/post/js-learning-22.html</id>
    <published>2018-10-10T06:06:00.000Z</published>
    <updated>2018-11-21T12:53:30.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/course/231577" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="DOM的定义"><a href="#DOM的定义" class="headerlink" title="DOM的定义"></a>DOM的定义</h2><blockquote><p>DOM（Document Object Model），定义了表示和修改文档所需的方法。DOM对象即为宿主对象，由浏览器厂商定义，用来操作<code>HTML</code>和<code>XML</code>功能的一类对象的集合。也有人称DOM是对<code>HTML</code>以及<code>XML</code>的标准编程接口。</p></blockquote><h2 id="DOM的基本操作"><a href="#DOM的基本操作" class="headerlink" title="DOM的基本操作"></a>DOM的基本操作</h2><h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><blockquote><p>代表整个文档的最顶级标签；<br><code>document</code>上有一些列方法；<br><code>html</code>代表整个文档的根标签。</p></blockquote><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a>getElementById</h3><blockquote><p>通过访问元素标签<code>id</code>来获取标签的方法；<br>元素标签<code>id</code>在<code>IE8</code>以下的浏览器下不区分<code>id</code>大小写，而且也返回匹配<code>name</code>属性的元素；<br>通过<code>getElementById</code>获取的是唯一元素。</p></blockquote><h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a>getElementsByTagName</h3><blockquote><p>通过访问元素标签名来获取一组标签的方法。<br>获取的一组数据是以<strong><em>类数组</em></strong>的形式进行存储。</p></blockquote><p>划重点：<strong><em>获取的所有成组的数据基本都是类数组</em></strong>。</p><p>该方法是<code>js</code>操作DOM中最主流最好用的方法之一，兼容性极强。</p><h3 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName"></a>getElementsByClassName</h3><blockquote><p>通过访问元素标签样式名来获取一组标签的方法。<br>有兼容性，<code>IE8</code>及以下浏览器不支持使用。</p></blockquote><h3 id="getElementsByName"><a href="#getElementsByName" class="headerlink" title="getElementsByName"></a>getElementsByName</h3><blockquote><p>通过访问元素标签<code>name</code>值来获取一组标签的方法。<br>兼容性不强，只有部分标签的name可生效，不推荐使用。</p></blockquote><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector"></a>querySelector</h3><blockquote><p>通过访问css选择器来选择一个标签；<br>有兼容性，在<code>IE7</code>及以下浏览器不支持使用；</p></blockquote><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll"></a>querySelectorAll</h3><blockquote><p>通过访问css选择器来选择一组元素；<br>有兼容性，在<code>IE7</code>及以下浏览器不支持使用；</p></blockquote><p><code>querySelector</code>和<code>querySelectorAll</code>不是实时的，获取的只是数据的副本，一个静态数据。</p><h2 id="DOM的节点操作"><a href="#DOM的节点操作" class="headerlink" title="DOM的节点操作"></a>DOM的节点操作</h2><h3 id="遍历节点操作"><a href="#遍历节点操作" class="headerlink" title="遍历节点操作"></a>遍历节点操作</h3><ul><li><code>parentNode</code>：标签的父节点，最顶端的父节点为<code>#document</code>；一个元素只有一个<code>parentNode</code>。</li><li><code>childNodes</code>：标签的子节点，返回一个类数组；只包含指定元素的下一级节点的集合，不包含子节点的子节点。</li><li><code>firstChild</code>：第一个子节点</li><li><code>lastChild</code>：最后一个子节点</li><li><code>nextSibling</code>：下一个兄弟节点</li><li><code>previousSibling</code>：上一个兄弟节点</li></ul><h3 id="遍历元素节点数"><a href="#遍历元素节点数" class="headerlink" title="遍历元素节点数"></a>遍历元素节点数</h3><ul><li><code>prantElement</code>：返回当前元素的父元素节点（<code>IE9</code>以下不兼容）</li><li><code>children</code>：只返回当前元素的子节点，兼容性强</li><li><code>node.childrenElementCount</code>：<code>===node.children.length</code>，返回当前元素子节点的个数。（<code>IE9</code>以下不兼容）</li><li><code>firstElementChild</code>：返回当前元素的第一个子节点（<code>IE9</code>以下不兼容）</li><li><code>lastElementSibling</code>：返回当前元素的最后一个子节点（<code>IE9</code>以下不兼容）</li><li><code>nextElementSibling</code>：返回当前元素的下一个兄弟节点（<code>IE9</code>以下不兼容）</li><li><code>previousElementSibling</code>：返回当前元素的上一个兄弟节点（<code>IE9</code>以下不兼容）</li></ul><p>实例：下面<code>div</code>标签下有多少个节点</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- this is a commet --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//在原型链上实现children()的方法</span>    Element<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myChildren <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> nodes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>      <span class="token keyword">var</span> len <span class="token operator">=</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">{</span>        length<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        push<span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">,</span>        splice<span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>splice      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> temp <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          elements<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// console.log(elements);</span>      <span class="token keyword">return</span> elements<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">myChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="节点的属性"><a href="#节点的属性" class="headerlink" title="节点的属性"></a>节点的属性</h3><h4 id="nodeName"><a href="#nodeName" class="headerlink" title="nodeName"></a><code>nodeName</code></h4><blockquote><p>元素节点的标签名，以大写形式表示，只读。<br>用来区分和判断节点。</p></blockquote><ul><li><code>Document</code>：<code>#document</code>；</li><li>元素节点：标签名（全大写）；</li><li>属性节点：属性名；</li><li>文本节点：<code>#text</code>；</li><li><code>Doctype</code>：<code>html</code>；</li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"#document"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"BODY"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"html"</span></code></pre><h4 id="nodeValue"><a href="#nodeValue" class="headerlink" title="nodeValue"></a><code>nodeValue</code></h4><blockquote><p><code>Text</code>节点或者<code>Comment</code>节点的文本内容，可读写。<br>用来区分和判断节点的时候用。</p></blockquote><ul><li><code>Document</code>：<code>null</code>；</li><li>元素节点：<code>null</code>；</li><li>属性节点：属性值；</li><li>文本节点：文本内容；</li><li><code>Doctype</code>：<code>null</code>；</li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//null</span></code></pre><h4 id="nodeType"><a href="#nodeType" class="headerlink" title="nodeType"></a><code>nodeType</code></h4><blockquote><p>元素节点的类型，只读。<br>用来判断元素节点类型。</p></blockquote><ul><li>元素节点：对应的值为<code>1</code></li><li>属性节点：对应的值为<code>2</code></li><li>文本节点：对应的值为<code>3</code></li><li>注释节点：对应的值为<code>8</code></li><li>Document：对应的值为<code>9</code></li><li>Doctype ：对应的值为<code>10</code></li><li>DocumentFragment：对应的值为<code>11</code></li></ul><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span></code></pre><ul><li><code>attributes</code>：元素节点的属性集合。</li></ul><h3 id="节点的方法"><a href="#节点的方法" class="headerlink" title="节点的方法"></a>节点的方法</h3><ul><li><code>Node.hasChildNodes()</code>：判断元素节点是否包含子节点，返回<code>Boolean</code>。</li></ul><h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><h3 id="获取指定节点，并打印出该节点下所有的元素子节点-不可用children方法"><a href="#获取指定节点，并打印出该节点下所有的元素子节点-不可用children方法" class="headerlink" title="获取指定节点，并打印出该节点下所有的元素子节点(不可用children方法)"></a>获取指定节点，并打印出该节点下所有的元素子节点(不可用children方法)</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Element<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myChildren <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">{</span>        length<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        push<span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">,</span>        splice<span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>splice      <span class="token punctuation">}</span><span class="token punctuation">,</span>        child <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">,</span>        len <span class="token operator">=</span> child<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">myChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="封装一个方法，求指定元素的第n层的父节点"><a href="#封装一个方法，求指定元素的第n层的父节点" class="headerlink" title="封装一个方法，求指定元素的第n层的父节点"></a>封装一个方法，求指定元素的第n层的父节点</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">function</span> <span class="token function">retParent</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先求一层，再求一层，递归调用；</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>elem <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      elem <span class="token operator">=</span> elem<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>      n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> elem<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">retParent</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="封装一个方法：返回元素e的第n个兄弟元素节点。如果n为正数返回后面的兄弟元素；n为负数返回前面的；为0则返回自己。"><a href="#封装一个方法：返回元素e的第n个兄弟元素节点。如果n为正数返回后面的兄弟元素；n为负数返回前面的；为0则返回自己。" class="headerlink" title="封装一个方法：返回元素e的第n个兄弟元素节点。如果n为正数返回后面的兄弟元素；n为负数返回前面的；为0则返回自己。"></a>封装一个方法：返回元素e的第n个兄弟元素节点。如果n为正数返回后面的兄弟元素；n为负数返回前面的；为0则返回自己。</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">function</span> <span class="token function">retSibling</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e <span class="token operator">=</span> e<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span> e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>nodeType <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n <span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e <span class="token operator">=</span> e<span class="token punctuation">.</span>previousElementSibling<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span> e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>nodeType <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>previousSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n <span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> e<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">retSibling</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&lt;p>&lt;/p></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/course/231577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web前端开发之JavaScript精英课堂【渡一
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（21）- ES5严格模式</title>
    <link href="http://iqianduan.com/post/js-learning-21.html"/>
    <id>http://iqianduan.com/post/js-learning-21.html</id>
    <published>2018-10-09T02:06:00.000Z</published>
    <updated>2018-10-09T03:23:15.540Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/course/231577" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><blockquote><p>现在浏览器调用的js方法是基于<code>ES3.0</code>的和<code>ES5.0</code>的新增方法。<br>如果<code>ES3.0</code>的和<code>ES5.0</code>产生冲突时，使用<code>ES3.0</code>的方法；</p></blockquote><h2 id="严格模式的定义"><a href="#严格模式的定义" class="headerlink" title="严格模式的定义"></a>严格模式的定义</h2><blockquote><p><code>ES3.0</code>的和<code>ES5.0</code>产生冲突时，使用<code>ES5.0</code>的方法来解决，这种模式就是<code>ES5.0</code>的严格模式；<br>使用严格模式不在兼容<code>ES3.0</code>的一些不规则语法，使用全新的<code>ES5.0</code>规范。</p></blockquote><h2 id="严格模式的使用"><a href="#严格模式的使用" class="headerlink" title="严格模式的使用"></a>严格模式的使用</h2><p>在逻辑代码的最顶端加入字符串：<code>&quot;use strict&quot;</code>，表示启用<code>ES5.0</code>的严格模式。</p><p>在严格模式下，一些方法不能被使用。比如：</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行代码会报错：</p><blockquote><p>js_test29.html:17 Uncaught TypeError: ‘caller’, ‘callee’, and ‘arguments’ properties may not be accessed on strict mode functions or the arguments objects for calls to them</p></blockquote><h3 id="严格模式的两种使用方式"><a href="#严格模式的两种使用方式" class="headerlink" title="严格模式的两种使用方式"></a>严格模式的两种使用方式</h3><ul><li>全局严格模式：在整段代码的最顶端添加<code>&quot;use strict&quot;</code>；</li><li>局部函数内严格模式：在该函数代码的最顶端添加<code>&quot;use strict&quot;</code>，推荐使用。</li></ul><p>严格模式的使用会向下兼容，不会对不兼容的浏览器产生影响。</p><h2 id="严格模式的规则"><a href="#严格模式的规则" class="headerlink" title="严格模式的规则"></a>严格模式的规则</h2><h3 id="with方法不可用"><a href="#with方法不可用" class="headerlink" title="with方法不可用"></a><code>with</code>方法不可用</h3><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token keyword">with</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="arguments-callee方法不可用"><a href="#arguments-callee方法不可用" class="headerlink" title="arguments.callee方法不可用"></a><code>arguments.callee</code>方法不可用</h3><h3 id="func-caller方法不可用"><a href="#func-caller方法不可用" class="headerlink" title="func.caller方法不可用"></a><code>func.caller</code>方法不可用</h3><h3 id="变量赋值前必须声明"><a href="#变量赋值前必须声明" class="headerlink" title="变量赋值前必须声明"></a>变量赋值前必须声明</h3><h3 id="局部的this必须被赋值使用"><a href="#局部的this必须被赋值使用" class="headerlink" title="局部的this必须被赋值使用"></a>局部的<code>this</code>必须被赋值使用</h3><p>预编译时，局部定义的<code>this</code>不再指向<code>window</code>，默认指向空，所以必须被赋值使用，而且<code>this</code>指向所赋值；如果没有赋值使用，则报错。</p><p>在全局里<code>this</code>还是指向<code>window</code>。</p><h3 id="拒绝使用重复的参数和属性名"><a href="#拒绝使用重复的参数和属性名" class="headerlink" title="拒绝使用重复的参数和属性名"></a>拒绝使用重复的参数和属性名</h3><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/course/231577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web前端开发之JavaScript精英课堂【渡一
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（20）- 错误捕捉</title>
    <link href="http://iqianduan.com/post/js-learning-20.html"/>
    <id>http://iqianduan.com/post/js-learning-20.html</id>
    <published>2018-10-09T01:00:00.000Z</published>
    <updated>2018-10-09T01:42:25.701Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/course/231577" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="try…catch…"><a href="#try…catch…" class="headerlink" title="try…catch…"></a>try…catch…</h2><blockquote><p>有时候代码的错误无法把控，或者一些未知情况下会出现错误。在这些情况下，需要多代码进行错误捕捉。<br>使用try…catch…可以对错误进行捕捉并抛出。</p></blockquote><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">try</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上代码的执行结果是：</p><pre class=" language-javascript"><code class="language-javascript">aReferenceError<span class="token punctuation">:</span> b is not definedd</code></pre><p>说明：</p><ul><li>在<code>try</code>里的代码如果发生错误，不会再执行try里错误代码后面其他的代码；</li><li>如果<code>try</code>里的代码不发生错误，<code>catch</code>里的代码不会执行；如果<code>try</code>里代码产生错误，<code>try</code>里其他代码停止执行，直接执行<code>catch</code>里的代码。</li><li><code>catch</code>里的代码执行完毕后，<code>catch</code>后面的代码正常执行。</li><li><code>catch(e){...}</code>代码里的形参<code>e</code>表示一个<code>error</code>对象。包括两个属性：<code>error.name</code>和<code>error.message</code>。</li></ul><h2 id="常见的错误名称-error-name"><a href="#常见的错误名称-error-name" class="headerlink" title="常见的错误名称(error.name)"></a>常见的错误名称(<code>error.name</code>)</h2><ul><li><code>EvalError</code>：<code>eval()</code>的使用与定义不一致</li><li><code>RangeError</code>：数值越界</li><li><code>ReferenceError</code>：非法或不能识别的引用数值</li><li><code>SyntaxError</code>：发生语法解析错误</li><li><code>TypeError</code>：操作数类型错误</li><li><code>URIError</code>：URI处理函数使用不当</li></ul><p>最常见的错误类型包括：<code>ReferenceError</code>、<code>SyntaxError</code>和<code>TypeError</code>。</p><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/course/231577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web前端开发之JavaScript精英课堂【渡一
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs 学习笔记(1) - 初识Nodejs</title>
    <link href="http://iqianduan.com/post/nodejs-learning-01.html"/>
    <id>http://iqianduan.com/post/nodejs-learning-01.html</id>
    <published>2018-09-26T08:30:00.000Z</published>
    <updated>2018-10-08T08:25:49.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nodejs定义"><a href="#Nodejs定义" class="headerlink" title="Nodejs定义"></a>Nodejs定义</h2><blockquote><p>Nodejs 是一个基于 <code>Chrome V8</code> 引擎的 <code>JavaScript</code> 运行环境。<br>Nodejs 使用了一个事件驱动、非阻塞式 <code>I/O</code> 的模型，使其轻量又高效。<br>Nodejs 的包管理器 <code>npm</code> 是全球最大的开源生态系统。</p></blockquote><h2 id="Nodejs的特点"><a href="#Nodejs的特点" class="headerlink" title="Nodejs的特点"></a>Nodejs的特点</h2><ul><li>使用 <code>JavaScript</code>；</li><li>速度非常的快(V8引擎 &amp; non-block)；</li><li>Nodejs的包管理器 <code>npm</code>，是全球最大的开源生态系统。</li></ul><h2 id="JavaScript引擎-Engines"><a href="#JavaScript引擎-Engines" class="headerlink" title="JavaScript引擎(Engines)"></a>JavaScript引擎(Engines)</h2><ul><li>电脑根本不识别也不理解javaScript代码；</li><li>JavaScript引擎的作用就是让电脑识别JS代码。</li></ul><h2 id="模块-Module"><a href="#模块-Module" class="headerlink" title="模块(Module)"></a>模块(Module)</h2><blockquote><p>在Nodejs中，文件和模块是一一对应的（每个文件被视为一个独立的模块）。<br>Nodejs中有一个简单的模块加载系统。</p></blockquote><h3 id="模块的定义"><a href="#模块的定义" class="headerlink" title="模块的定义"></a>模块的定义</h3><h3 id="Node事件模块"><a href="#Node事件模块" class="headerlink" title="Node事件模块"></a>Node事件模块</h3><h4 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h4><blockquote><p>大多数<code>Node.js</code>核心API都是采用惯用的异步事件驱动架构（fs/http）；<br>所有能触发事件的对象都是EventEmitter类的实例。<br>事件流程：引入模块 -&gt; 创建EventEmitter对象 -&gt; 注册事件 -&gt; 触发事件。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Nodejs定义&quot;&gt;&lt;a href=&quot;#Nodejs定义&quot; class=&quot;headerlink&quot; title=&quot;Nodejs定义&quot;&gt;&lt;/a&gt;Nodejs定义&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Nodejs 是一个基于 &lt;code&gt;Chrome V8&lt;/code
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
      <category term="nodejs" scheme="http://iqianduan.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue 学习笔记(4) - 使用vue-resource进行http请求操作</title>
    <link href="http://iqianduan.com/post/vue-learning-04.html"/>
    <id>http://iqianduan.com/post/vue-learning-04.html</id>
    <published>2018-09-26T01:30:00.000Z</published>
    <updated>2018-10-09T01:47:41.932Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue使用过程中，最重要的操作离不开数据操作，即http请求中常用的包括增、删、改、查等操作。<br>Vue进行http请求操作有两种方式，引入<code>vue-resource</code> 或者 <code>axios</code>。</p></blockquote><p>接下来主要对<code>vue-resource</code>做介绍。</p><h2 id="vue-resource的安装"><a href="#vue-resource的安装" class="headerlink" title="vue-resource的安装"></a><code>vue-resource</code>的安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-resource --save-dev</code></pre><p>安装后需要引入和使用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> VueResource form <span class="token string">'vue-resource'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueResource<span class="token punctuation">)</span></code></pre><h2 id="vue-resource的特点"><a href="#vue-resource的特点" class="headerlink" title="vue-resource的特点"></a><code>vue-resource</code>的特点</h2><ol><li><p>体积小。<code>vue-resource</code> 非常小巧，在压缩以后只有大约12KB，服务端启用gzip压缩后只有4.5KB大小，这远比jQuery的体积要小得多。</p></li><li><p>支持主流的浏览器。和Vue.js一样，vue-resource除了不支持IE 9以下的浏览器，其他主流的浏览器都支持。</p></li><li><p>支持<code>Promise API</code> 和 <code>URI Templates</code>。</p></li><li><p>支持拦截器。</p></li></ol><h2 id="vue-resource的使用"><a href="#vue-resource的使用" class="headerlink" title="vue-resource的使用"></a><code>vue-resource</code>的使用</h2><h3 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 基于全局Vue对象使用http</span>Vue<span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="局部使用"><a href="#局部使用" class="headerlink" title="局部使用"></a>局部使用</h3><p>常用于<code>$http</code>直接在<code>methods</code>或者<code>created</code>中定义。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 基于局部Vue文件使用http</span><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>successCallback<span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>说明：</p><ul><li>发送 <code>http</code>请求后，通过<code>then</code>方法相应处理结果并进行接收返回结果。</li><li><code>then</code>方法返回的结果有两个参数：一个是响应成功的回调方法，另一个是响应失败的回调。</li></ul><p><code>then</code>方法的书写形式有以下几种：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//一般模式</span><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求响应成功！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求响应失败！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ES6模式</span><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求响应成功！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求响应失败！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还可以使用<code>catch</code>方法来响应和捕捉请求失败的异常：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//catch模式</span><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求响应成功！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求响应失败！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>代码的<code>error</code>并不是包含在<code>then</code>方法中，而是在和<code>then</code>方法并列的<code>catch</code>方法里。</p><p><code>catch</code>方法和<code>then</code>方法中<code>errorCallback</code>是不同的，<code>then</code>方法只在响应失败时调用，而<code>catch</code>方法是在整个请求到响应过程中，只要程序出错了就会被调用。</p><h2 id="vue-resource支持的HTTP方法"><a href="#vue-resource支持的HTTP方法" class="headerlink" title="vue-resource支持的HTTP方法"></a><code>vue-resource</code>支持的HTTP方法</h2><p><code>vue-resource</code>的请求API是按照REST风格设计的，它提供了7种请求API：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">patch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>body<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">head</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">jsonp</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="options对象"><a href="#options对象" class="headerlink" title="options对象"></a>options对象</h3><p>发送请求时的options选项对象包含以下属性：</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">url</td><td style="text-align:left">String</td><td style="text-align:left">请求的URL。可以是绝对地址，相对地址或者是字符串拼接地址</td></tr><tr><td style="text-align:left">method</td><td style="text-align:left">String</td><td style="text-align:left">请求的HTTP方法，例如：’GET’, ‘POST’或其他HTTP方法</td></tr><tr><td style="text-align:left">body</td><td style="text-align:left">Object, FormDataString</td><td style="text-align:left">request body</td></tr><tr><td style="text-align:left">params</td><td style="text-align:left">Object</td><td style="text-align:left">请求的URL参数对象</td></tr><tr><td style="text-align:left">headers</td><td style="text-align:left">Object</td><td style="text-align:left">request header</td></tr><tr><td style="text-align:left">timeout</td><td style="text-align:left">Number</td><td style="text-align:left">单位为毫秒的请求超时时间 (0 表示无超时时间)</td></tr><tr><td style="text-align:left">before</td><td style="text-align:left">function(request)</td><td style="text-align:left">请求发送前的处理函数，类似于jQuery的beforeSend函数</td></tr><tr><td style="text-align:left">progress</td><td style="text-align:left">function(event)</td><td style="text-align:left">ProgressEvent回调处理函数</td></tr><tr><td style="text-align:left">emulateHTTP</td><td style="text-align:left">Boolean</td><td style="text-align:left">发送PUT, PATCH, DELETE请求时以HTTP POST的方式发送，并设置请求头的X-HTTP-Method-Override</td></tr><tr><td style="text-align:left">emulateJSON</td><td style="text-align:left">Boolean</td><td style="text-align:left">将request body以application/x-www-form-urlencoded content type发送</td></tr></tbody></table><h3 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h3><p>response对象包含以下属性：</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">text()</td><td style="text-align:left">String</td><td style="text-align:left">以String形式返回response body</td></tr><tr><td style="text-align:left">json()</td><td style="text-align:left">Object</td><td style="text-align:left">以JSON对象形式返回response body</td></tr><tr><td style="text-align:left">blob()</td><td style="text-align:left">Blob</td><td style="text-align:left">以二进制形式返回response body</td></tr></tbody></table><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">ok</td><td style="text-align:left">Boolean</td><td style="text-align:left">响应的HTTP状态码在200~299之间时，该属性为true</td></tr><tr><td style="text-align:left">status</td><td style="text-align:left">Number</td><td style="text-align:left">响应的HTTP状态码</td></tr><tr><td style="text-align:left">statusText</td><td style="text-align:left">String</td><td style="text-align:left">响应的状态文本</td></tr><tr><td style="text-align:left">headers</td><td style="text-align:left">Object</td><td style="text-align:left">响应头</td></tr></tbody></table><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a><code>get</code>请求</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> param1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> param2<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//成功后返回数据</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//失败返回错误信息</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>说明：</p><ul><li><code>url</code>：必须。可以是绝对地址，也可以是设置代理后的地址；</li><li><code>params</code>：非必须，需要向后台传的参数，没有则不填。</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://segmentfault.com/a/1190000007087934" target="_blank" rel="noopener">Vue_VueResource</a></li><li><a href="https://www.cnblogs.com/axl234/p/5899137.html" target="_blank" rel="noopener">vue-resource插件使用</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;Vue使用过程中，最重要的操作离不开数据操作，即http请求中常用的包括增、删、改、查等操作。&lt;br&gt;Vue进行http请求操作有两种方式，引入&lt;code&gt;vue-resource&lt;/code&gt; 或者 &lt;code&gt;axios&lt;/code&gt;。&lt;/p&gt;&lt;
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
      <category term="vue" scheme="http://iqianduan.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 学习笔记(3) - Vuex</title>
    <link href="http://iqianduan.com/post/vue-learning-03.html"/>
    <id>http://iqianduan.com/post/vue-learning-03.html</id>
    <published>2018-09-20T02:30:00.000Z</published>
    <updated>2018-09-27T10:07:38.613Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue学习笔记和代码记录。</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>主要应用于Vue.js中管理数据状态的一个库；<br>通过创建一个集中的数据存储，供程序中所有的组件访问。</p></blockquote><h2 id="Vue实例化对象"><a href="#Vue实例化对象" class="headerlink" title="Vue实例化对象"></a>Vue实例化对象</h2><blockquote><p>实例化Vue对象；</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 需要获取的元素，一定是html中的根元素</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;Vue学习笔记和代码记录。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;主要应用于Vue.js中管
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
      <category term="vue" scheme="http://iqianduan.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 学习笔记(2) - Vue-cli脚手架</title>
    <link href="http://iqianduan.com/post/vue-learning-02.html"/>
    <id>http://iqianduan.com/post/vue-learning-02.html</id>
    <published>2018-09-07T02:30:00.000Z</published>
    <updated>2018-09-27T10:11:23.227Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue 学习笔记和代码记录。</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>Vue 官方提供的<code>CLI</code>，为单页面应用 (SPA) 快速搭建繁杂的脚手架。</p></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>脚手架是通过<code>webpack</code>搭建的开发环境；</li><li>使用<code>ES6</code>语法；</li><li>打包和压缩为一个<code>js</code>文件；</li><li>项目文件在环境中编译，而不是浏览器；</li><li>实现页面自动刷新。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-js"><code class="language-js">index<span class="token punctuation">.</span>html <span class="token operator">-</span><span class="token operator">></span> main<span class="token punctuation">.</span>js <span class="token operator">-</span><span class="token operator">></span> App<span class="token punctuation">.</span>vue</code></pre><h2 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h2><h3 id="父传子：props"><a href="#父传子：props" class="headerlink" title="父传子：props"></a>父传子：<code>props</code></h3><ul><li>传值：<code>Number</code>、<code>String</code>、<code>Boolean</code></li><li>传引用：<code>Array</code>、<code>Object</code></li></ul><p>如何传引用值？</p><h3 id="子传父：-emit"><a href="#子传父：-emit" class="headerlink" title="子传父：$emit"></a>子传父：<code>$emit</code></h3><p>引用多个子组件，相同的方法相互影响如何避免？</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="生命周期的作用"><a href="#生命周期的作用" class="headerlink" title="生命周期的作用"></a>生命周期的作用</h3><ul><li>了解过程，方便找错误；</li><li>了解需求，来确定实现过程定义在哪个环节；</li></ul><h3 id="生命周期的过程"><a href="#生命周期的过程" class="headerlink" title="生命周期的过程"></a>生命周期的过程</h3><ul><li><code>beforCreate</code>: 组件实例化之前执行的函数，预加载的执行；</li><li><code>created</code>: 组件实例化完毕但页面还未显示，常用作请求数据；结束<code>beforeCreate</code>的动作；</li><li><code>beforeMount</code>：组件挂载前状态，页面仍未展示，但虚拟 Dom 已配置，挂载模版之前的操作；</li><li><code>mounted</code>：组件挂载完毕，页面 dom 生成，加载完毕；</li><li><code>beforeUpdate</code>：组件更新前，页面仍未更新，需要调用的钩子函数</li><li><code>updated</code>：组件更新后，此方法一旦执行，页面就显示。需要发生变化而调用的钩子函数；</li><li><code>beforeDestory</code>：组件销毁前执行的钩子函数方法；</li><li><code>destoryed</code>：组件销毁后的钩子函数方法；</li></ul><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><h3 id="路由参数的作用"><a href="#路由参数的作用" class="headerlink" title="路由参数的作用"></a>路由参数的作用</h3><blockquote><p>使用同一套模版，根据传过来的不同 ID 展示不同内容。</p></blockquote><h3 id="路由的实例化"><a href="#路由的实例化" class="headerlink" title="路由的实例化"></a>路由的实例化</h3><p>过程：</p><ul><li>安装路由：<code>npm install vue-router --save</code>；</li><li>引入路由：<code>import VueRouter form &#39;vue-router&#39;</code>；</li><li>使用路由：<code>Vue.use(VueRouter)</code></li><li>路由实例化：路由实例化有两种方式。</li></ul><p>第一种：直接实例化：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'routerName'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> RouterName    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第二种：引入实例化：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'routerName'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> RouterName  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> routes<span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>路由挂载：</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>路由使用：路由使用可以有不同种方法：</li></ul><p>第一种：使用<code>path</code>属性。</p><pre class=" language-html"><code class="language-html">const router = new VueRouter({  routes : [    {      path: "/",      name: "routerName",      component: RouterName    }  ],  mode: "history"})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/routerName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><p>第二种：使用<code>path</code>属性结合动态属性绑定。</p><pre class=" language-html"><code class="language-html">const router = new VueRouter({  routes : [    {      path: "/",      name: "routerName",      component: RouterName    }  ],  mode: "history"})export default {  data () {    return {      routerLink : "/routerName"    }  }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ routerLink }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><p>第三种：使用<code>name</code>属性，需要结合属性绑定来使用；</p><pre class=" language-html"><code class="language-html">const router = new VueRouter({  routes : [    {      path: "/",      name: "routerName",      component: RouterName    }  ],  mode: "history"})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ name: <span class="token punctuation">'</span>routerName<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><p>第四种：动态改变路由跳转。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goToRouter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Bingo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes <span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"routerName"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> RouterName    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  methods <span class="token punctuation">:</span> <span class="token punctuation">{</span>    goToRouter <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 跳转到上一次访问链接</span>      <span class="token comment" spellcheck="true">//this.$router.go(-1);</span>      <span class="token comment" spellcheck="true">// 跳转到指定的地址</span>      <span class="token comment" spellcheck="true">//this.$router.replace("/admin");</span>      <span class="token comment" spellcheck="true">// 跳转到指定的名称</span>      <span class="token comment" spellcheck="true">// this.$router.replace({name: "menu"});</span>      <span class="token comment" spellcheck="true">// 通过push进行跳转</span>      <span class="token comment" spellcheck="true">// this.$router.push({name: "menu"});</span>      <span class="token comment" spellcheck="true">//this.$router.push("/admin");</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><blockquote><p><code>vue-router</code> 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。</p></blockquote><p>以上内容来自<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">官网</a>。</p><h3 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h3><p>可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>参数说明：</p><ul><li><code>to</code>：值为<code>router</code>，即将要进入的路由；</li><li><code>from</code>：值为<code>router</code>，当前导航正要离开的路由；</li><li><code>next</code>：值为<code>function</code>，一个回调函数</li></ul><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断当前页面是否是注册或者登录页面</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/login'</span> <span class="token operator">||</span> to<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/register'</span> <span class="token operator">||</span> to<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请先登录！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h3><blockquote><p>和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//后置钩子</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'after each!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h3><blockquote><p>在路由配置上直接定义 <code>beforeEnter</code> 守卫。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">"/admin"</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>  component <span class="token punctuation">:</span> Admin  beforeEnter<span class="token punctuation">:</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//路由独享守卫</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"非登录状态无法登录，请先登录！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h3><blockquote><p>在路由组件内直接定义以下路由导航守卫。</p></blockquote><p>共有三种模式：</p><p>第一种模式： <code>beforeRouteEnter</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'tabliu'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span>vm <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello '</span> <span class="token operator">+</span> vm<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>说明：</p><ul><li>在渲染该组件的对应路由被 <code>confirm</code> 前调用；</li><li>不！能！获取组件实例 <code>this</code>；</li><li>因为当守卫执行前，组件实例还没被创建。</li></ul><p>第二种模式：<code>beforeRouteLeave</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'tabliu'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'确定要离开吗？'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>说明：</p><ul><li>导航离开该组件的对应路由时调用；</li><li>可以访问组件实例 <code>this</code>。</li></ul><p>第三种模式：<code>beforeRouteUpdate</code> (2.2 新增)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'确定要改变吗？'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>说明：</p><ul><li>在当前路由改变，但是该组件被复用时调用；</li><li>举例来说，对于一个带有动态参数的路径 <code>/foo/:id</code>，在 <code>/foo/1</code> 和 <code>/foo/2</code> 之间跳转的时候，由于会渲染同样的 <code>Foo</code> 组件，因此组件实例会被复用，而这个钩子就会在这个情况下被调用；</li><li>可以访问组件实例 <code>this</code>。</li></ul><h3 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h3><ul><li>导航被触发；</li><li>在失活的组件里调用离开守卫；</li><li>调用全局的 <code>beforeEach</code> 守卫；</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)；</li><li>在路由配置里调用 <code>beforeEnter；</code></li><li>解析异步路由组件；</li><li>在被激活的组件里调用 <code>beforeRouteEnter；</code></li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)；</li><li>导航被确认；</li><li>调用全局的 <code>afterEach</code> 钩子；</li><li>触发 <code>DOM</code> 更新；</li><li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;Vue 学习笔记和代码记录。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Vue 官方提供的&lt;co
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
      <category term="vue" scheme="http://iqianduan.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（19）- 类数组</title>
    <link href="http://iqianduan.com/post/js-learning-19.html"/>
    <id>http://iqianduan.com/post/js-learning-19.html</id>
    <published>2018-08-16T01:29:00.000Z</published>
    <updated>2018-08-23T02:27:00.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/course/231577" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="类数组的定义"><a href="#类数组的定义" class="headerlink" title="类数组的定义"></a>类数组的定义</h2><blockquote><p>具有数组属性和方法的一组数据的集合。<br>通常是一个对象的形式。</p></blockquote><h2 id="类数组的组成"><a href="#类数组的组成" class="headerlink" title="类数组的组成"></a>类数组的组成</h2><ul><li>属性要为索引（数字）属性；</li><li>必须有<code>length</code>属性；</li><li>最好加上<code>push</code>方法的属性；</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"0"</span> <span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  <span class="token string">"1"</span> <span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token string">"2"</span> <span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>  <span class="token string">"length"</span> <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token string">"push"</span> <span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">,</span>  <span class="token string">"splice"</span> <span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>splice<span class="token punctuation">}</span>Arrary<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看一个实例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"2"</span> <span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  <span class="token string">"3"</span> <span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token string">"length"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"push"</span> <span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//obj{2: "c", 3: "d", length: 4, push: Array.prototype.push}</span></code></pre><p>类数组的关键点是使用<code>length</code>的特性来取值和赋值并改变<code>length</code>的值。</p><h2 id="类数组的应用"><a href="#类数组的应用" class="headerlink" title="类数组的应用"></a>类数组的应用</h2><blockquote><p>具有数组和对象的特性，可以把数组和对象的属性都拼在一起拿来用。<br>并不是所有的方法都可以用，如果要使用数组的方法，需要手动添加进来。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"0"</span> <span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  <span class="token string">"1"</span> <span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token string">"3"</span> <span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>  name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  age <span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>  sex <span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  length <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  push <span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">,</span>  splice <span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>splice<span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h2><h3 id="封装一个type方法，能够准确的判断各个目标对象的类型"><a href="#封装一个type方法，能够准确的判断各个目标对象的类型" class="headerlink" title="封装一个type方法，能够准确的判断各个目标对象的类型"></a>封装一个<code>type</code>方法，能够准确的判断各个目标对象的类型</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//typeof([]) --> array</span><span class="token comment" spellcheck="true">//typeof({}) --> object</span><span class="token comment" spellcheck="true">//typeof(function) --> function</span><span class="token comment" spellcheck="true">//typeof(new Number()) --> number Object</span><span class="token comment" spellcheck="true">//typeof(123) --> number</span></code></pre><p>基本思路：</p><ol><li>先区分原始值和引用值；</li><li>针对引用值中的<code>object</code>类型进行区分；</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">type</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> tof <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">,</span>      toStr <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">,</span>      tempObj <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"[object Array]"</span> <span class="token punctuation">:</span> <span class="token string">'array'</span><span class="token punctuation">,</span>        <span class="token string">"[object Object]"</span> <span class="token punctuation">:</span> <span class="token string">'object'</span><span class="token punctuation">,</span>        <span class="token string">"[object Boolean]"</span> <span class="token punctuation">:</span> <span class="token string">'boolean - object'</span><span class="token punctuation">,</span>        <span class="token string">"[object Date]"</span> <span class="token punctuation">:</span> <span class="token string">'date - object'</span><span class="token punctuation">,</span>        <span class="token string">"[object Number]"</span> <span class="token punctuation">:</span> <span class="token string">'number - object'</span><span class="token punctuation">,</span>        <span class="token string">"[object RegExp]"</span> <span class="token punctuation">:</span> <span class="token string">'regExp - object'</span><span class="token punctuation">,</span>        <span class="token string">"[object String]"</span> <span class="token punctuation">:</span> <span class="token string">'string - object'</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'null'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tof <span class="token operator">==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> tempObj<span class="token punctuation">[</span>toStr<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> tof<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里一定要注意<code>==</code>和<code>===</code>的区别使用。</p><h3 id="数组去重，要求在原型链上编程"><a href="#数组去重，要求在原型链上编程" class="headerlink" title="数组去重，要求在原型链上编程"></a>数组去重，要求在原型链上编程</h3><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>unique <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr[1,2,3,'a','b',undefined]</span></code></pre><p>思路：利用对象的一个特性：<code>同一个属性名不可以多个同名属性</code>。</p><ol><li>新建一个数组，把数组的各个值当作对象的属性名并随意赋值；</li><li>判断数组中的属性是否有值，如果是<code>undefined</code>则说明没有值，进行赋值后再逐个去重；</li><li>把去重后的对象的属性名形成一个全新的数组并返回。</li></ol><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>unique <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      temp<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'flag'</span><span class="token punctuation">;</span>      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span>undefined<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr[1,2,3,'a','b',undefined]</span></code></pre><p>本题中一定要理解<code>this</code>的作用和和<code>this[i]</code>的使用。</p><h3 id="一个字符串由-a-z-组成，请找出该字符串第一个只出现一次的字母"><a href="#一个字符串由-a-z-组成，请找出该字符串第一个只出现一次的字母" class="headerlink" title="一个字符串由[a-z]组成，请找出该字符串第一个只出现一次的字母"></a>一个字符串由[a-z]组成，请找出该字符串第一个只出现一次的字母</h3><h3 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h3><p>思路：利用之前完成的数组去重的方法，先把字符串转成数组，去重后再转回字符串。</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>unique <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'flag'</span><span class="token punctuation">;</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">strUnique</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// var arr = str.split("");</span>    <span class="token comment" spellcheck="true">// var temp = arr.unique();</span>    <span class="token comment" spellcheck="true">// var str = temp.join("");</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'dfasdafsfdsfsfdsf'</span><span class="token punctuation">;</span><span class="token function">strUnique</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'dfas'</span></code></pre><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/course/231577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web前端开发之JavaScript精英课堂【渡一
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（18）- 数组</title>
    <link href="http://iqianduan.com/post/js-learning-18.html"/>
    <id>http://iqianduan.com/post/js-learning-18.html</id>
    <published>2018-08-14T00:18:00.000Z</published>
    <updated>2018-10-11T06:50:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/course/231577" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><blockquote><p>所谓数组，是有序的元素序列。<br>若将有限个类型相同的变量的集合命名，那么这个名称为数组名。</p></blockquote><p>以上定义来源于百度百科。</p><h2 id="数组的定义方法"><a href="#数组的定义方法" class="headerlink" title="数组的定义方法"></a>数组的定义方法</h2><h3 id="字面量定义"><a href="#字面量定义" class="headerlink" title="字面量定义"></a>字面量定义</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//稀松数组，length为6</span></code></pre><h3 id="系统构造式"><a href="#系统构造式" class="headerlink" title="系统构造式"></a>系统构造式</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个空数组</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个包含3个元素的数组，元素为空</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个包含元素1，2，3的数组</span></code></pre><p>数组用到的所有方法全来源于<code>Array.prototype</code>。</p><p>使用<code>new Array()</code>方法创建数组<code>()</code>里可以直接传参数，但当参数只有一位且为数字时，表示为数组的长度<code>length</code>为该数字，而不是该数组第一位。</p><p>如果参数只有一位则<strong><em>必须为正整数</em></strong>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr.lenght = 1</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr.lenght = 6</span></code></pre><h2 id="数组的属性"><a href="#数组的属性" class="headerlink" title="数组的属性"></a>数组的属性</h2><p>数组的常用属性是<code>length</code>，表示数组的长度。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr.lenght = 4</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr.lenght = 6</span></code></pre><p><code>length</code>属性，既可以通过<code>arr.length</code>来读取，也可以改变赋值，从而改变原数组。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr.lenght = 4</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr变成一个新数组，相当于 arr = [1, 2, 3, 4,,,]</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr变成一个空数组，相当于 arr = []</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr变成一个6位的空值数组，相当于 arr = new Array(6)</span></code></pre><h2 id="数组的操作"><a href="#数组的操作" class="headerlink" title="数组的操作"></a>数组的操作</h2><h3 id="数组的读"><a href="#数组的读" class="headerlink" title="数组的读"></a>数组的读</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span></code></pre><p>数组的读操作在正常情况下基本不会报错，除非执行了其不存在的方法。</p><h3 id="数组的写"><a href="#数组的写" class="headerlink" title="数组的写"></a>数组的写</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// arr[,,,,,,,,,'abc']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//11</span></code></pre><p>总结：</p><blockquote><p>数组不可以溢出读，返回为<code>undefined</code>；可以溢出写。</p></blockquote><h2 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h2><blockquote><p>分为es3.0、es5.0和es6.0方法。</p></blockquote><h3 id="改变原数组的方法"><a href="#改变原数组的方法" class="headerlink" title="改变原数组的方法"></a>改变原数组的方法</h3><h4 id="push方法"><a href="#push方法" class="headerlink" title="push方法"></a>push方法</h4><blockquote><p>在数组的最后位置添加数组。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr[1,2,3]</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>模拟实现<code>push()</code>的方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="pop方法"><a href="#pop方法" class="headerlink" title="pop方法"></a>pop方法</h4><blockquote><p>对数组的最后一位进行剪切操作。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr[1,2,3,4]</span></code></pre><p><code>pop()</code>方法是对数组最后一位进行剪切并返回原数组的长度，不支持添加参数，只能剪切一位。</p><h4 id="shift方法"><a href="#shift方法" class="headerlink" title="shift方法"></a>shift方法</h4><blockquote><p>从数组的第一位开始进行删除操作。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr[2,3,4,5]</span></code></pre><h4 id="unshift方法"><a href="#unshift方法" class="headerlink" title="unshift方法"></a>unshift方法</h4><blockquote><p>从数组的第一位开始进行添加操作，和<code>push()</code>方法类似，只是从第一位开始操作。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr[-1,0,1,2,3,4,5]</span></code></pre><h4 id="reverse方法"><a href="#reverse方法" class="headerlink" title="reverse方法"></a>reverse方法</h4><blockquote><p>对数组进行翻转操作并返回数组。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr[5,4,3,2,1]</span></code></pre><h4 id="splice方法"><a href="#splice方法" class="headerlink" title="splice方法"></a>splice方法</h4><blockquote><p>对数组进行切片操作并返回截取数据组成的新数组。<br>参数使用：arr.splice(从第几位开始, 截取多少的长度, 在切口处添加新的数据)</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr[1,2,3,3]</span></code></pre><p>如果不截取数据则在第二位添加<code>0</code>；从第三位可以添加无数个参数都视为添加的新数据。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr[1,2,3,3]</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3]</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//arr[1,2,3,4,5,6]</span></code></pre><p>我们知道<code>splice()</code>方法第一个参数表示是从第几位开始，这个参数必须是整数且不能越界，但允许是负数，<strong><em>负数值表示该数组的倒数第几位</em></strong>。</p><p>其计算方法位：</p><pre class=" language-javascript"><code class="language-javascript">pos <span class="token operator">+</span><span class="token operator">=</span> pos <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> pos <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre><h4 id="sort方法"><a href="#sort方法" class="headerlink" title="sort方法"></a>sort方法</h4><blockquote><p>对数组进行排序并返回数组。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[0,3,4,5,6]</span></code></pre><p><code>sort()</code>方法默认是按照升序进行排列，但排序是按照ASKII码的大小进行比较。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[0,1,10,2,4,5]</span></code></pre><p><code>sort()</code>方法预留接口可以自定义方法实现想要的功能。</p><p>自定义方法的说明：</p><ul><li><code>function(){}</code>中必须要传入两个参数；</li><li>看方法的返回值：<br>1、当返回值为<strong><em>负数</em></strong> 时，那么<strong><em>前面的数放在前面</em></strong>；<br>2、当返回值为<strong><em>正数</em></strong> 时，那么<strong><em>后面的数放在前面</em></strong>；<br>3、当返回值为<strong><em>0</em></strong> 时，那么<strong><em>该位置数不动</em></strong>。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 默认升序</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 降序</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//简写为</span>  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 升序</span>  <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 降序</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>练习：</p><p>给一个有序的数组乱序排列</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据数组中对象的属性值进行排序</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> deng <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'deng'</span><span class="token punctuation">,</span>  age <span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>  sex <span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> cheng <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'cheng'</span><span class="token punctuation">,</span>  age <span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  sex <span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> fang <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'fang'</span><span class="token punctuation">,</span>  age <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  sex <span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>deng<span class="token punctuation">,</span> cheng<span class="token punctuation">,</span> fang<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>age <span class="token operator">-</span> b<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据数组中字符串的长度进行排序</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abss大多数'</span><span class="token punctuation">,</span> <span class="token string">'sj范德萨'</span><span class="token punctuation">,</span> <span class="token string">'djsfdsf大水法范德萨'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//['sj范德萨', 'abss大多数', 'djsfdsf大水法范德萨']</span></code></pre><p>根据数组中字符串的字节长度进行排序</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getCharLength</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> num <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     num <span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abss大多数'</span><span class="token punctuation">,</span> <span class="token string">'sj范德萨太帅了！！'</span><span class="token punctuation">,</span> <span class="token string">'djsfdsweeef大水法'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">getCharLength</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getCharLength</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//["abss大多数", "djsfdsweeef大水法", "sj范德萨太帅了！！"]</span></code></pre><h3 id="不改变原数组的方法"><a href="#不改变原数组的方法" class="headerlink" title="不改变原数组的方法"></a>不改变原数组的方法</h3><h4 id="concat方法"><a href="#concat方法" class="headerlink" title="concat方法"></a>concat方法</h4><blockquote><p>连接多个数组并返回一个新数组。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3, 0, 4, 5, 6, 1, 3, 4, 5, 66, 3]</span></code></pre><h4 id="slice方法"><a href="#slice方法" class="headerlink" title="slice方法"></a>slice方法</h4><blockquote><p>截取数组的若干位，并将截取的数据返回一个新数组。<br>可以添加参数，且不同参数具有不同的意义。</p></blockquote><p>两个参数：<code>slice(从该位开始截取, 截取到该位)</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[0,4]</span></code></pre><p>一个参数：<code>slice(从该位开始截取一直截取到最后一位)</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[0,4,5,6]</span></code></pre><p>没有参数：<code>slice()</code>从开始位截取到最后。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3,0,4,5,6]</span></code></pre><h4 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h4><blockquote><p>通过给定的连接方式将数组的每一位连接起来并返回。<br>须有一个字符串的参数，没有连接方式用空串<code>&#39;&#39;</code>或者<code>&quot;&quot;</code>，如果不加默认以<code>,</code>方式进行连接。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'3-0-4-5-6'</span></code></pre><p><code>join()</code>方法返回的是一个字符串，在字符串里提供了一个<code>split()</code>方法可以将字符串通过给定的方式进行拆分组成一个新数组。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'3-0-4-5-6'</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["3", "0", "4", "5", "6"]</span></code></pre><p>练习：对多个字符串进行连接</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'tencent'</span><span class="token punctuation">,</span>    str2 <span class="token operator">=</span> <span class="token string">'alibaba'</span><span class="token punctuation">,</span>    str3 <span class="token operator">=</span> <span class="token string">'baidu'</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">]</span><span class="token keyword">var</span> strFanal <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strFanal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'tencent/alibaba/baidu'</span></code></pre><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/course/231577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web前端开发之JavaScript精英课堂【渡一
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（17）- JS中的this</title>
    <link href="http://iqianduan.com/post/js-learning-17.html"/>
    <id>http://iqianduan.com/post/js-learning-17.html</id>
    <published>2018-08-03T01:40:00.000Z</published>
    <updated>2018-08-13T09:06:51.371Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/course/231577" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="一、this的使用"><a href="#一、this的使用" class="headerlink" title="一、this的使用"></a>一、this的使用</h2><h3 id="函数预编译过程中this指向window"><a href="#函数预编译过程中this指向window" class="headerlink" title="函数预编译过程中this指向window"></a>函数预编译过程中<code>this</code>指向<code>window</code></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//预编译环节</span>AO <span class="token punctuation">{</span>  arguments <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token keyword">this</span> <span class="token punctuation">:</span> window<span class="token punctuation">,</span>  c <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  a <span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  b <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>如果该函数是构造函数，在执行<code>new test()</code>过程中<code>this</code>会发生改变：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//this = Object.create(test.prototype);</span><span class="token comment" spellcheck="true">//相当于</span><span class="token comment" spellcheck="true">//{</span><span class="token comment" spellcheck="true">//  __proto__ : test.prototype</span><span class="token comment" spellcheck="true">//}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="全局作用域中this指向window"><a href="#全局作用域中this指向window" class="headerlink" title="全局作用域中this指向window"></a>全局作用域中<code>this</code>指向<code>window</code></h3><h3 id="call和apply可以改变函数运行是的this指向"><a href="#call和apply可以改变函数运行是的this指向" class="headerlink" title="call和apply可以改变函数运行是的this指向"></a><code>call</code>和<code>apply</code>可以改变函数运行是的<code>this</code>指向</h3><h3 id="obj-func-里func-里面的this指向ojb"><a href="#obj-func-里func-里面的this指向ojb" class="headerlink" title="obj.func();里func()里面的this指向ojb"></a><code>obj.func();</code>里<code>func()</code>里面的<code>this</code>指向<code>ojb</code></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  a <span class="token punctuation">:</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对象里函数中的<code>this</code>指向：<strong><em>谁调用的这个方法，<code>this</code>就指向谁</em></strong>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'222'</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'111'</span><span class="token punctuation">,</span>  say <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> fun <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function() {</span><span class="token comment" spellcheck="true">//  console.log(this.name); //this指向window，结果'222'</span><span class="token comment" spellcheck="true">//}</span>a<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function() {</span><span class="token comment" spellcheck="true">//  console.log(this.name); //this指向a，结果'111'</span><span class="token comment" spellcheck="true">//}</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'333'</span><span class="token punctuation">,</span>  say <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>b<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function() {</span><span class="token comment" spellcheck="true">//  console.log(this.name); //this指向window，结果'222'</span><span class="token comment" spellcheck="true">//}</span>b<span class="token punctuation">.</span>say <span class="token operator">=</span> a<span class="token punctuation">.</span>say<span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function() {</span><span class="token comment" spellcheck="true">//  console.log(this.name); //this指向b，结果'333'</span><span class="token comment" spellcheck="true">//}</span></code></pre><h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><h3 id="arguments-callee"><a href="#arguments-callee" class="headerlink" title="arguments.callee"></a>arguments.callee</h3><blockquote><p>指向函数自身的引用。</p></blockquote><p>举个栗子：求10的阶乘</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> n <span class="token operator">*</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一般的做法是定义一个实名函数<code>fac(n)</code>，通过枚举的方法来循环调用<code>fac(n) * fac(n-1)</code>；但如果是通过立即执行函数来实现，就无法循环调用函数名，只能通过<code>argumengs.callee</code>来调用自身。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据函数执行顺序从上到下执行，先执行<code>function a()</code>中<code>console.log(arguments.callee);</code>；再执行<code>function b()</code>中<code>console.log(arguments.callee);</code>。所以返回结果也是：<code>function a(){}</code>和<code>function b(){}</code>。</p><p>总结：<code>arguments.callee</code>返回的是<strong><em>当前执行环境下的函数体</em></strong>。</p><h3 id="func-caller"><a href="#func-caller" class="headerlink" title="func.caller"></a>func.caller</h3><blockquote><p>返回调用函数的函数体。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>caller<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//null</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>caller<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//function a() { b(); }</span><span class="token punctuation">}</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>function a() {}</code>函数没有任何调用；<code>function b() {}</code>被<code>function a() {}</code>调用执行，所以返回结果：<code>null</code>和<code>function a() { b(); }</code></p><p>总结：</p><ul><li>这两个方法经常会拿来一起比较，但实际开发中很少用到；</li><li>在ES5语法中，这两个方法不可用。</li></ul><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><blockquote><p>条件判断 ? 是 : 否 并且会返回值</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">'10'</span> <span class="token operator">></span> <span class="token string">'9'</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 字符串相比是比的主位ask码</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span></code></pre><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><h3 id="求console-log打印结果？"><a href="#求console-log打印结果？" class="headerlink" title="求console.log打印结果？"></a>求<code>console.log</code>打印结果？</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果是：<code>234</code>。</p><p>如果执行<code>new test();</code>的打印结果呢？</p><p>返回：<code>123</code>。</p><h3 id="运行test-和new-test-的结果分别是什么？"><a href="#运行test-和new-test-的结果分别是什么？" class="headerlink" title="运行test()和new  test()的结果分别是什么？"></a>运行<code>test()</code>和<code>new test()</code>的结果分别是什么？</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//test();</span>  <span class="token comment" spellcheck="true">// A0 {</span>  <span class="token comment" spellcheck="true">//   a : undefined;</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token comment" spellcheck="true">//a = 0;</span>  <span class="token comment" spellcheck="true">//console.log(a); //0</span>  <span class="token comment" spellcheck="true">//console.log(this.a); //5</span>  <span class="token comment" spellcheck="true">//var a;</span>  <span class="token comment" spellcheck="true">//console.log(a); //0</span>  <span class="token comment" spellcheck="true">//new test();</span>  <span class="token comment" spellcheck="true">// this == Object.create(test.prototype);</span>  <span class="token comment" spellcheck="true">// A0 {</span>  <span class="token comment" spellcheck="true">//   a : undefined;</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token comment" spellcheck="true">//a = 0;</span>  <span class="token comment" spellcheck="true">//console.log(a); //0</span>  <span class="token comment" spellcheck="true">//console.log(this.a); //undefined</span>  <span class="token comment" spellcheck="true">//var a;</span>  <span class="token comment" spellcheck="true">//console.log(a); //0</span></code></pre><p>总结：</p><p><code>this</code>考题涉及到的知识点：</p><ul><li>函数预编译(AO)；</li><li><code>this</code>指向问题；</li><li>函数和构造函数的预编译差异。</li></ul><h2 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h2><h3 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  age <span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>  sex <span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  card <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'visa'</span><span class="token punctuation">,</span> <span class="token string">'life'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'card1'</span><span class="token punctuation">,</span> <span class="token string">'card2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> target <span class="token operator">=</span> target <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">clone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>浅克隆的方法很好实现，但也存在一个问题。如果对象的属性值是非原始值，那目标对象和原始对象都会指向到相同的索引上，改变一方，另一方也会发生改变。</p><p>现实项目中是不希望发生的，这样就需要用到深克隆的方法来实现。</p><h3 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  age <span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>  sex <span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  card <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'visa'</span><span class="token punctuation">,</span> <span class="token string">'life'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'card1'</span><span class="token punctuation">,</span> <span class="token string">'card2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  wife <span class="token punctuation">:</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'bcd'</span><span class="token punctuation">,</span>    son <span class="token punctuation">:</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">'cdde'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>分析思路：</p><ul><li>遍历对象：<code>for(var prop in obj)</code></li><li>判断是否是原始值：<code>typeof(obj[prop]) == Object</code></li><li>判断是否是数组还是对象： <code>constructor/instanceof/toString()</code>三种方法，推荐使用<code>toString()</code></li><li>建立相应的数组或者对象：<code>[] or {}</code></li><li>递归</li></ul><p>实现：</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>    card<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'visa'</span><span class="token punctuation">,</span> <span class="token string">'life'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'card1'</span><span class="token punctuation">,</span> <span class="token string">'card2'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    wife<span class="token punctuation">:</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'bcd'</span><span class="token punctuation">,</span>      son<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'cdde'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> target <span class="token operator">=</span> target <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      toStr <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">,</span>      arrStr <span class="token operator">=</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'null'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>toStr<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> arrStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token function">deepClone</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>使用三目运算符还看简化下代码：</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> target <span class="token operator">=</span> target <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      toStr <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">,</span>      arrStr <span class="token operator">=</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'null'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// if (toStr.call(origin[prop]) == arrStr) {</span>          <span class="token comment" spellcheck="true">//   target[prop] = [];</span>          <span class="token comment" spellcheck="true">// } else {</span>          <span class="token comment" spellcheck="true">//   target[prop] = {}</span>          <span class="token comment" spellcheck="true">// }</span>          target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> toStr<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>originp<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">==</span> arrStr<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token function">deepClone</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> origin<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>总结：</p><p>在实现深克隆功能的过程中一定要注意一下几个问题：</p><ol><li><code>Object.prototype.toString</code>的使用；</li><li><code>hasOwnProperty()</code>的使用；</li><li><code>===</code>与<code>==</code>的区别使用；</li><li><code>typeof</code> 的返回结果都是小写的字符串。</li></ol><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/course/231577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web前端开发之JavaScript精英课堂【渡一
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（16）- 对象的应用</title>
    <link href="http://iqianduan.com/post/js-learning-16.html"/>
    <id>http://iqianduan.com/post/js-learning-16.html</id>
    <published>2018-08-03T00:58:00.000Z</published>
    <updated>2018-08-03T11:26:40.425Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/course/231577" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="属性的表示方法"><a href="#属性的表示方法" class="headerlink" title="属性的表示方法"></a>属性的表示方法</h2><h3 id="obj-prop"><a href="#obj-prop" class="headerlink" title="obj.prop"></a>obj.prop</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'abc'</span></code></pre><h3 id="obj-prop-1"><a href="#obj-prop-1" class="headerlink" title="obj[prop]"></a>obj[prop]</h3><p>这里的<code>prop</code>是属性名，是字符串形式，使用时要用<code>&#39;&#39;</code>括起来。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'abc'</span></code></pre><p>使用<code>obj.prop</code>和<code>obj[prop]</code>都可以进行属性表示，而且其实是隐式进行了转换：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//obj.prop --> obj['prop']</span></code></pre><p>所以其实直接使用<code>obj[prop]</code>运行起来更快，不需要隐式转化。</p><p>使用<code>obj[prop]</code>还有一个很重要的作用就是属性拼接。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> deng <span class="token operator">=</span> <span class="token punctuation">{</span>  wife1 <span class="token punctuation">:</span> <span class="token string">'xiaozhang'</span><span class="token punctuation">,</span>  wife2 <span class="token punctuation">:</span> <span class="token string">'xiaowang'</span><span class="token punctuation">,</span>  wife3 <span class="token punctuation">:</span> <span class="token string">'xiaoli'</span><span class="token punctuation">,</span>  wife4 <span class="token punctuation">:</span> <span class="token string">'xiaozhao'</span><span class="token punctuation">,</span>  sayWife <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">'wife'</span> <span class="token operator">+</span> num<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deng<span class="token punctuation">.</span><span class="token function">sayWife</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'xiaozhang'</span></code></pre><h2 id="对象的枚举"><a href="#对象的枚举" class="headerlink" title="对象的枚举"></a>对象的枚举</h2><h3 id="枚举的定义"><a href="#枚举的定义" class="headerlink" title="枚举的定义"></a>枚举的定义</h3><blockquote><p>在数学和计算机科学理论中，一个集的枚举是列出某些有穷序列集的所有成员的程序，或者是一种特定类型对象的计数。这两种类型经常（但不总是）重叠。 [1] 是一个被命名的整型常数的集合，枚举在日常生活中很常见，例如表示星期的SUNDAY、MONDAY、TUESDAY、WEDNESDAY、THURSDAY、FRIDAY、SATURDAY就是一个枚举。</p></blockquote><p>以上是百科里对枚举的定义，比较枯燥难懂。通俗的讲枚举就是遍历，对一组特定的数据集里的数据进行逐个访问或者其他操作的过程。</p><p>我们看一个简单的例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1,4,4,55,66</span><span class="token punctuation">}</span></code></pre><p>我们对定义的一个数组逐个访问数组内部的值的过程就是枚举。</p><p>那如果要遍历一个对象，该如何操作呢，接下来我们继续。</p><h3 id="对象的枚举方法-for…in…"><a href="#对象的枚举方法-for…in…" class="headerlink" title="对象的枚举方法(for…in…)"></a>对象的枚举方法(for…in…)</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaowang <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  age <span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>  sex <span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  height <span class="token punctuation">:</span> <span class="token number">172</span><span class="token punctuation">,</span>  weight<span class="token punctuation">:</span> <span class="token number">72</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> xiaowang<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaowang<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们看下打印结果：</p><p><img src="/demo/demo_12.png" alt="对象属性"></p><p>输出全部都是<code>undefined</code>，为什么呢？</p><p>我们刚才上面讲了一个知识点：使用<code>obj.prop</code>和<code>obj[prop]</code>都可以进行属性表示，而且其实是隐式进行了转换：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//obj.prop --> obj['prop']</span></code></pre><p>再回到本例中，我们看下隐式转换关系：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//xiaowang.prop --> xiaowang['prop']</span></code></pre><p>其实是执行了5次<code>console.log(xiaowang[&#39;prop&#39;]);</code>，因为<code>prop</code>没有值，所以返回<code>undefined</code>。换成<code>console.log(xiaowang[prop]);</code>就可以正常执行了。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaowang <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  age <span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>  sex <span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  height <span class="token punctuation">:</span> <span class="token number">172</span><span class="token punctuation">,</span>  weight<span class="token punctuation">:</span> <span class="token number">72</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> xiaowang<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaowang<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这才是我们期望的结果：</p><p><img src="/demo/demo_13.png" alt="对象属性"></p><p>总结：</p><ul><li>使用for…in…循环，其实就是遍历，通过对象的属性个数来控制循环圈数，有多少个属性就循环多少圈；</li><li><code>var prop</code>是变量定义，可以放在外面，同时<code>prop</code>可以其他名称来命名；</li><li><code>for(prop in obj)</code>在循环每一圈时，他会把对象的属性放在<code>prop</code>里，想遍历那个对象就是<code>in</code>谁，这里是固定的；</li><li>建议输出变量属性时用<code>obj[prop]</code>这种形式来写，避免不必要的错误。</li></ul><h2 id="判断对象的属性-in"><a href="#判断对象的属性-in" class="headerlink" title="判断对象的属性(in)"></a>判断对象的属性(in)</h2><p>判断一个属性是否在对象中，可以使用<code>in</code>方法来操作，返回一个布尔值。</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'prop'</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true or false</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaowang <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  age <span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>  sex <span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  height <span class="token punctuation">:</span> <span class="token number">172</span><span class="token punctuation">,</span>  weight<span class="token punctuation">:</span> <span class="token number">72</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> xiaowang<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'lastName'</span> <span class="token keyword">in</span> xiaowang<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span></code></pre><p>通过<code>in</code>方法可判断这个对象<code>obj</code>身上所有的属性。这个方法使用没有什么实际意义，所以很少应用。</p><h2 id="判断对象的自身属性-hasOwnProperty"><a href="#判断对象的自身属性-hasOwnProperty" class="headerlink" title="判断对象的自身属性(hasOwnProperty)"></a>判断对象的自身属性(hasOwnProperty)</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaowang <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  age <span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>  sex <span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  height <span class="token punctuation">:</span> <span class="token number">172</span><span class="token punctuation">,</span>  weight<span class="token punctuation">:</span> <span class="token number">72</span><span class="token punctuation">,</span>  __proto__<span class="token punctuation">:</span> <span class="token punctuation">{</span>    lastName <span class="token punctuation">:</span> <span class="token string">'Liu'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> xiaowang<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaowang<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用for…in…循环有一个潜在的问题，<code>prop</code>会把这个对象<code>obj</code>身上所有自设的方法都进行输出，包括自己的和继承原型和原型链上的，但是不会把系统的属性进行打印。</p><p>如果我们不希望把原型上的属性输出，只希望输出自身的属性，就要用到<code>hasOwnProperty</code>这个方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xiaowang <span class="token operator">=</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  age <span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>  sex <span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>  height <span class="token punctuation">:</span> <span class="token number">172</span><span class="token punctuation">,</span>  weight<span class="token punctuation">:</span> <span class="token number">72</span><span class="token punctuation">,</span>  __proto__<span class="token punctuation">:</span> <span class="token punctuation">{</span>    lastName <span class="token punctuation">:</span> <span class="token string">'Liu'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> xiaowang<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>xiaowang<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaowang<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>总结：</p><ul><li><code>hasOwnProperty</code>方法可以判断属性是自身的还是继承来在原型，任何一个对象里都有这个方法可以使用。</li><li>使用<code>hasOwnProperty</code>方法需要传一个字符串形式的参数进来，返回布尔值。</li></ul><h2 id="判断对象的方法-instanceof"><a href="#判断对象的方法-instanceof" class="headerlink" title="判断对象的方法(instanceof)"></a>判断对象的方法(instanceof)</h2><p><code>instanceof</code>的操作用法和<code>in</code>类似，但作用完全不同。他是判断一个对象是否输出给定的构造对象并返回一个布尔值。</p><p>相当于<code>A instanceof B</code>。意思是：A对象是不是B构造函数构造出来的。</p><p>判断方法：<strong><em>看对象的原型链上有没有目标构造函数的原型</em></strong>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ture</span></code></pre><p>如果给定一个变量，其值可能是数组或者对象，如何进行判断？</p><p>第一种方法：使用<code>constructor</code>返回构造函数来看。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Array 数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Object 对象</span></code></pre><p>第二种方法：使用<code>instanceof Array</code>看返回结果。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true 数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false 对象</span></code></pre><p>第三种方法：使用<code>Object.prototype.toString()</code>方法来调用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//""</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"Object"</span><span class="token comment" spellcheck="true">//相当于</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//第一步：识别this指向</span>  <span class="token comment" spellcheck="true">//第二步：返回相应的结果</span><span class="token punctuation">}</span></code></pre><p>我知道<code>toString()</code>方法针对不同类型的对象会返回不同结果，方法定义如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//相当于</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//第一步：识别this指向</span>  <span class="token comment" spellcheck="true">//第二步：返回相应的结果</span><span class="token punctuation">}</span></code></pre><p>我们可以利用<code>call()</code>方法来改变<code>this</code>的指向，这样就达到了判别不同类型数据的类型了。</p><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Array</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Object</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Number</span></code></pre><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/course/231577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web前端开发之JavaScript精英课堂【渡一
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（15）- 命名空间</title>
    <link href="http://iqianduan.com/post/js-learning-15.html"/>
    <id>http://iqianduan.com/post/js-learning-15.html</id>
    <published>2018-08-01T01:00:00.000Z</published>
    <updated>2018-08-02T03:10:40.190Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/course/231577" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="命名空间的作用"><a href="#命名空间的作用" class="headerlink" title="命名空间的作用"></a>命名空间的作用</h2><blockquote><p>管理变量，防止污染全局，适用于模块化开发。</p></blockquote><h2 id="命名空间的方法"><a href="#命名空间的方法" class="headerlink" title="命名空间的方法"></a>命名空间的方法</h2><h3 id="传统方法：在变量前面加前缀"><a href="#传统方法：在变量前面加前缀" class="headerlink" title="传统方法：在变量前面加前缀"></a>传统方法：在变量前面加前缀</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token operator">=</span> jcName<span class="token punctuation">;</span></code></pre><p>这种方法存在很多局限性，现在已基本抛弃使用。</p><h3 id="通过对象属性来产生命名空间"><a href="#通过对象属性来产生命名空间" class="headerlink" title="通过对象属性来产生命名空间"></a>通过对象属性来产生命名空间</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> org <span class="token operator">=</span> <span class="token punctuation">{</span>  department1 <span class="token punctuation">:</span> <span class="token punctuation">{</span>    zhangsan <span class="token punctuation">:</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>      age <span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    lisi <span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  department2 <span class="token punctuation">:</span> <span class="token punctuation">{</span>    zhaowu <span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    wangmazi <span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> zhangsan <span class="token operator">=</span> org<span class="token punctuation">.</span>department1<span class="token punctuation">.</span>zhangsan<span class="token punctuation">;</span>zhangsan<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'bcd'</span><span class="token punctuation">;</span></code></pre><p>这种方法比较麻烦，不是最优的命名空间解决方法。</p><h3 id="通过闭包来实现变量私有化"><a href="#通过闭包来实现变量私有化" class="headerlink" title="通过闭包来实现变量私有化"></a>通过闭包来实现变量私有化</h3><p>用闭包来解决，返回方法的调用。</p><p><code>init</code>是入口函数，初始化，用来调用不同函数的执行。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> init <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样通过立即执行函数形成一个闭包，<code>init</code>用来执行<code>return</code>出来的方法，避免了变量冲突。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> init <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> initDeng <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'ccc'</span><span class="token punctuation">;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//aaa</span><span class="token function">initDeng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//bbb</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ccc</span></code></pre><p>即使有全局变量或者其他函数的定义，也不会相互影响，很好的解决了变量污染的问题。</p><p>延伸阅读：<a href="http://ourjs.com/detail/538d8d024929582e6200000c" target="_blank" rel="noopener">在JavaScript中创建命名空间的几种写法</a></p><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/course/231577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web前端开发之JavaScript精英课堂【渡一
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（14）- 继承发展史</title>
    <link href="http://iqianduan.com/post/js-learning-14.html"/>
    <id>http://iqianduan.com/post/js-learning-14.html</id>
    <published>2018-07-31T02:00:00.000Z</published>
    <updated>2018-08-13T02:05:49.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/course/231577" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h2><blockquote><p>JavaScript中并没有真正意义上的继承，所谓的继承是利用不同方法来实现的。</p></blockquote><h2 id="继承的实现方法"><a href="#继承的实现方法" class="headerlink" title="继承的实现方法"></a>继承的实现方法</h2><h3 id="传统形式：原型链"><a href="#传统形式：原型链" class="headerlink" title="传统形式：原型链"></a>传统形式：原型链</h3><p>通过原型和原型链的方法来实现继承。</p><pre class=" language-javascript"><code class="language-javascript">Grand<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">'Liu'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Grand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> grand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Grand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Father<span class="token punctuation">.</span>prototype <span class="token operator">=</span> grand<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> father<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>用原型链实现继承在使用这些方法时会产生一些额外的且不希望产生的影响，过多的继承了一些没用的属性。</p><p>这种方法很早就被废弃。</p><h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> tel<span class="token punctuation">,</span> grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>tel <span class="token operator">=</span> tel<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> studend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> male<span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">201801</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这种方式是借用了<code>call()</code>或者<code>apply（）</code>方法来实现继承。这种方式不算标准的继承，因为无法继承借用构造函数的原型。</p><p>还有一个不太好的地方就是每次执行构造函数的时候还要多执行一个函数，造成效率浪费。</p><h3 id="公有原型"><a href="#公有原型" class="headerlink" title="公有原型"></a>公有原型</h3><pre class=" language-javascript"><code class="language-javascript">Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">'Liu'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Father<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印<code>son.lastName</code>输出<code>Liu</code>，很好的实现了继承。</p><p>我们可以把上面的继承方法封装成一个方法，方便不同构造函数的调用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span>Target<span class="token punctuation">,</span> Origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Target<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Origin<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过原型共享实现继承，但对于继承的还是被继承的构造函数，不可以随便修改自己的原型，否则继承或者被继承的原型也会发生改变。</p><pre class=" language-javascript"><code class="language-javascript">Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">'Liu'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span>Target<span class="token punctuation">,</span> Origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Target<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Origin<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">inherit</span><span class="token punctuation">(</span>Son<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Son<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//male</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//male</span></code></pre><p>我们可以看到打印<code>father.sex</code>也会输出<code>male</code>，究其原因是因为<code>Father.prototype</code>受到<code>Son.prototype</code>的修改而发生变化。</p><h3 id="圣杯模式"><a href="#圣杯模式" class="headerlink" title="圣杯模式"></a>圣杯模式</h3><p>上例可看出：在共有原型中，对象试图改变自己原型的一些属性时将会影响到其他对象，这是我们不希望看到的情况。</p><p>我们希望：对象修改自己原型的一些属性，又保证不影响其他对象的原型。</p><p>这里就可以采用圣杯模式的方法来实现继承：</p><ul><li>通过创建一个构造函数<code>Temp</code>来充当中间层并共用原始构造函数<code>Origin</code>的原型；</li><li>让目标构造函数<code>Target</code>的原型通过中间层构造函数原型链<code>new Temp()</code>来产生继承；</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span>Target<span class="token punctuation">,</span> Origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  Temp<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Origin<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  Target<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>回到上例中：</p><pre class=" language-javascript"><code class="language-javascript">Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">'Liu'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span>Target<span class="token punctuation">,</span> Origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  Temp<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Origin<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  Target<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">inherit</span><span class="token punctuation">(</span>Son<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Son<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'male'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//male</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span></code></pre><p><code>Son</code>修改原型<code>Son.prototype.sex = &#39;male&#39;</code>并不会影响到<code>Father</code>的原型，从而达到我们期望的效果。</p><p>我们知道对象都有一个属性<code>constructor</code>来指向对象构造函数，我们看上例中<code>son</code>的<code>constructor</code>是谁呢？</p><p><img src="/demo/demo_11.png" alt="constructor属性"></p><pre class=" language-javascript"><code class="language-javascript">son<span class="token punctuation">.</span>__proto__ <span class="token operator">--</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__proto__ <span class="token operator">--</span><span class="token operator">></span> Father<span class="token punctuation">.</span>prototype</code></pre><p>通过输出和分析我们得知：<code>son</code>的<code>constructor</code>是<code>function Father() {}</code>，这样在实际使用有些混乱，我们可以把这个构造器进行归位，同时记录其原始构造器以备后用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">inherit</span><span class="token punctuation">(</span>Target<span class="token punctuation">,</span> Origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  Temp<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Origin<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  Target<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Target<span class="token punctuation">;</span>  Target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>origin <span class="token operator">=</span> Origin<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样就完成了一个完整的圣杯模式的方法。</p><p>再看下<code>YUI</code>中圣杯模式的写法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> inherit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> Temp <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>Target<span class="token punctuation">,</span> Origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Temp<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Origin<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>    Target<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Target<span class="token punctuation">;</span>    Target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>origin <span class="token operator">=</span> Origin<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">inherit</span><span class="token punctuation">(</span>Son<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用</span></code></pre><p>这里用到了闭包的一个作用：<strong><em>可以实现封装，属性私有化</em></strong>。</p><p>用立即执行函数和返回匿名函数来形成闭包，导致函数体中的<code>Temp</code>形成一个私有化变量。</p><p>通过圣杯模式很好的解决了对象的继承和避免原型相互依赖和影响的问题。</p><p>本节完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/course/231577&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web前端开发之JavaScript精英课堂【渡一
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
</feed>
