<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大踏步走</title>
  
  <subtitle>Tabliu&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iqianduan.com/"/>
  <updated>2018-07-11T02:11:21.025Z</updated>
  <id>http://iqianduan.com/</id>
  
  <author>
    <name>Tabliu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript学习笔记（9）- 立即执行函数</title>
    <link href="http://iqianduan.com/2018/07/05/js-learning-09/"/>
    <id>http://iqianduan.com/2018/07/05/js-learning-09/</id>
    <published>2018-07-05T03:09:10.000Z</published>
    <updated>2018-07-11T02:11:21.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/webcourse/index.html#course_id=231577&amp;term_id=100273169&amp;taid=1464734172022937&amp;vid=a14198i8y2h" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>此类函数没有声明，在一次执行后即释放。适合做初始化工作。针对初始化功能的函数，形式上这种函数执行后即被释放。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span>      b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//357</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//abc is not defined</span></code></pre><h3 id="书写形式"><a href="#书写形式" class="headerlink" title="书写形式"></a>书写形式</h3><ul><li>(function () {}()) // W3C推荐写法</li><li>(function () {})()</li></ul><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><ul><li>只有表达式才能被执行符号执行。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span>      b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//357</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>能被执行符号执行的函数名称会被自动忽略，被执行符号执行的表达式就会变成立即执行函数。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span>      b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//357</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span></code></pre><ul><li>变异的函数执行：通过在正常函数声明的前面添加<code>+</code>、<code>-</code>或<code>!</code>，后面添加<code>()</code>可变成立即执行函数。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">/</span><span class="token operator">-</span><span class="token operator">/</span><span class="token operator">!</span><span class="token punctuation">]</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span>      b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//357</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例：阿里的考题</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的代码是否会报错？是否会执行？返回结果是什么？</p><p>再看下面一个例子：输出0到9的数字。</p><p>我们在浏览器查看结果，发现输出的是<code>10 10 10 10 10 10 10 10 10 10</code>。</p><p>到这是不是有点懵？为什么会是这样的结果呢？</p><p>答案就是因为这里产生了闭包。for循环会产生10个函数体并返回到数组arr里，但函数只有在下面的for循环输出的时候才会被依次执行。此时，函数体里<code>document.write(i + &quot; &quot;);</code>的<code>i</code>其实是公用testAO作用域链里的值10，所以每次输出的都是10。</p><p>那如何能够实现我们的要求呢？这里就要用到立即执行函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>      arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> myArr <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  myArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在for循环里添加一个带参数的立即执行函数，通过<code>i</code>的实参传给函数里的形参来执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/webcourse/index.html#course_id=231577&amp;amp;term_id=100273169&amp;amp;taid=14
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（8）- 闭包</title>
    <link href="http://iqianduan.com/2018/07/05/js-learning-08/"/>
    <id>http://iqianduan.com/2018/07/05/js-learning-08/</id>
    <published>2018-07-05T02:10:10.000Z</published>
    <updated>2018-07-11T01:54:28.707Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/webcourse/index.html#course_id=231577&amp;term_id=100273169&amp;taid=1464734172022937&amp;vid=a14198i8y2h" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>当内部函数被保存到外部时，将会生成闭包。闭包会导致原有作用域链不释放，造成内存泄露。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> bbb <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> aaa <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> glob <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>里面的函数被保存到了基础函数的外部就会形成闭包。当前可以通过<code>return</code>或者把内部函数赋值给变量的形式来跳到外面。</p><p>什么是内存泄漏？</p><blockquote><p>内存空间被占用越多，剩余可用空间越来越少，形象的叫内存泄漏。</p></blockquote><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><h4 id="实现公有变量"><a href="#实现公有变量" class="headerlink" title="实现公有变量"></a>实现公有变量</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> demo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span></code></pre><p>这样做的好处既可以实现公有变量，又不会造成变量污染。</p><h4 id="可以做缓存（存储结构）"><a href="#可以做缓存（存储结构）" class="headerlink" title="可以做缓存（存储结构）"></a>可以做缓存（存储结构）</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> abc <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    abc<span class="token operator">++</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    abc<span class="token operator">--</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> myArr <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//101</span>myArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//100</span></code></pre><p>从上面的例子可以看出，<code>a()</code> 和 <code>b()</code> 有一个共用的作用域链 <code>testAO</code>，也包括一个公共的变量 <code>abc</code>。</p><p>接下来看另外一个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">eater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> food <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    eat<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'am eating "</span> <span class="token operator">+</span> food <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      food <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    push<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>myFood<span class="token punctuation">)</span> <span class="token punctuation">{</span>      food <span class="token operator">=</span> myFood<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> eater <span class="token operator">=</span> <span class="token function">eater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eater<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eater<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>多个函数和一个函数形成闭包，他们直接的变量可以共用，类似于缓存的存储机制。</p><h4 id="可以实现封装，属性私有化"><a href="#可以实现封装，属性私有化" class="headerlink" title="可以实现封装，属性私有化"></a>可以实现封装，属性私有化</h4><h4 id="模块化开发，防止污染全局变量"><a href="#模块化开发，防止污染全局变量" class="headerlink" title="模块化开发，防止污染全局变量"></a>模块化开发，防止污染全局变量</h4><p>这两个作用后期讲到后进行补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/webcourse/index.html#course_id=231577&amp;amp;term_id=100273169&amp;amp;taid=14
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（7）- 作用域</title>
    <link href="http://iqianduan.com/2018/07/04/js-learning-07/"/>
    <id>http://iqianduan.com/2018/07/04/js-learning-07/</id>
    <published>2018-07-04T03:10:11.000Z</published>
    <updated>2018-07-05T10:23:21.430Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/webcourse/index.html#course_id=231577&amp;term_id=100273169&amp;taid=1464734172022937&amp;vid=a14198i8y2h" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>变量（变量作用于又称上下文）和函数生效（能被访问）的区域。</p></blockquote><h4 id="全景、局部变量"><a href="#全景、局部变量" class="headerlink" title="全景、局部变量"></a>全景、局部变量</h4><h4 id="作用域的访问顺序"><a href="#作用域的访问顺序" class="headerlink" title="作用域的访问顺序"></a>作用域的访问顺序</h4><h4 id="执行期上下文"><a href="#执行期上下文" class="headerlink" title="执行期上下文"></a>执行期上下文</h4><blockquote><p>但函数自信是，会创建一个称为<strong><em>执行期上下文</em></strong>的内部对象。一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行期上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行期上下文，但函数执行完毕，它所产生的执行期上下文被销毁。</p></blockquote><h4 id="scope"><a href="#scope" class="headerlink" title="[[scope]]"></a>[[scope]]</h4><blockquote><p>每个JavaScript函数都是一个对象，对象中有些属性我们可以访问，但有些不可以，这些属性仅供JavaScript引擎存取，[[scope]]就是其中一个。<br>[[scope]]指的是我们说说的作用域，其中存储了运行期上下文的集合。</p></blockquote><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><blockquote><p>[[scope]]中所存储的执行期上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。<br>查找变量：从作用域链的顶端依次向下查找。在哪个函数执行就在哪个函数的作用域链顶端依次向下查找。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> glob <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a defined  a.[[scope]] -- > 0 : GO{}</span><span class="token comment" spellcheck="true">// a doing    a.[[scope]] -- > 0 : aAO{}</span><span class="token comment" spellcheck="true">//                             1 : GO{}</span><span class="token comment" spellcheck="true">// b defined  a.[[scope]] -- > 0 : GO{}</span><span class="token comment" spellcheck="true">//                             1 : aAO{}</span><span class="token comment" spellcheck="true">// b doing    a.[[scope]] -- > 0 : bAO{}</span><span class="token comment" spellcheck="true">//                             1 : aAO{}</span><span class="token comment" spellcheck="true">//                             2 : GO{}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/webcourse/index.html#course_id=231577&amp;amp;term_id=100273169&amp;amp;taid=14
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（6）- 函数</title>
    <link href="http://iqianduan.com/2018/07/03/js-learning-06/"/>
    <id>http://iqianduan.com/2018/07/03/js-learning-06/</id>
    <published>2018-07-03T02:10:00.000Z</published>
    <updated>2018-07-05T10:23:15.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/webcourse/index.html#course_id=231577&amp;term_id=100273169&amp;taid=1464734172022937&amp;vid=a14198i8y2h" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="函数-–-高内聚-弱偶合"><a href="#函数-–-高内聚-弱偶合" class="headerlink" title="函数 – 高内聚 弱偶合"></a>函数 – 高内聚 弱偶合</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>函数声明：function 函数名() { 函数体 }</li><li>函数表达式：var 变量名 = function 函数名() { 函数体 }</li></ul><p><strong><em>表达式会忽略函数名，变成一个匿名函数，可通过变量名.name打印出函数名。</em></strong></p><h3 id="组成形式"><a href="#组成形式" class="headerlink" title="组成形式"></a>组成形式</h3><h4 id="函数名称"><a href="#函数名称" class="headerlink" title="函数名称"></a>函数名称</h4><ul><li>同变量名规则</li><li>小驼峰形式</li></ul><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li>形式参数：arguments[i]</li><li>实际参数：函数名[i]</li></ul><p><strong><em>形参和实参有强对应关系，一个改变，另一个也会跟着变，但他们是两个不同的地址；但如果不对应实参，就会不对应映射关系。</em></strong></p><h4 id="返回值（结束体）"><a href="#返回值（结束体）" class="headerlink" title="返回值（结束体）"></a>返回值（结束体）</h4><ul><li>直接返回：return</li><li>返回值：return 返回值</li></ul><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><ul><li>更好找规律：return公式；</li><li>必须要有出口：结束死循环。</li></ul><p><strong><em>递归可以让代码更简洁，但实现最不高效，先执行的最后被执行完。</em></strong></p><h3 id="函数执行三要素"><a href="#函数执行三要素" class="headerlink" title="函数执行三要素"></a>函数执行三要素</h3><ul><li>执行边界</li><li>开始边界</li><li>结束边界</li></ul><h3 id="函数预编译"><a href="#函数预编译" class="headerlink" title="函数预编译"></a>函数预编译</h3><h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4><ul><li>函数声明：<strong><em>整体提升</em></strong>；</li><li>变量： <strong><em>声明提升</em></strong>；</li></ul><h4 id="预编译前奏"><a href="#预编译前奏" class="headerlink" title="预编译前奏"></a>预编译前奏</h4><ul><li>imply global暗示全局变量：任何变量，如果变量未经声明就赋值，此变量就为全局对象window所有。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//直接赋值</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>相当于：window<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//连续赋值</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//123</span></code></pre><ul><li>一切声明的全局变量，都是归window所有，是window的属性。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>相当于：window <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">}</span></code></pre><ul><li>window 就是全局。</li></ul><h4 id="预编译过程：发生在函数执行的前一刻。预编译过程："><a href="#预编译过程：发生在函数执行的前一刻。预编译过程：" class="headerlink" title="预编译过程：发生在函数执行的前一刻。预编译过程："></a>预编译过程：发生在函数执行的前一刻。预编译过程：</h4><ul><li>创建AO对象：Activation Object（执行期上下文，作用域）；</li><li>找形参和变量声明，将形参名和变量作为AO属性名，值为undefined；</li><li>将实参值和形参统一，把实参的值赋给形参；</li><li>在函数体里面找函数声明，值赋予函数体。<br>示例如下：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 预编译：发生在函数执行的前一刻</span><span class="token comment" spellcheck="true">// 找AO</span>AO <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//第3步：1；第4步：function a() {}。执行后第1次：function a() {}；第2次：123；第3次：123</span>  b<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//执行后function () {}</span>  d<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//执行后function d() {}</span><span class="token punctuation">}</span></code></pre><p><strong><em>敲黑板</em></strong></p><ul><li>打印的变量后有同名的函数声明，打印的一定是function；</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> foo<span class="token punctuation">;</span>  foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>打印的变量前有变量声明并赋值，打印的一定是最后的赋值；</li></ul><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> foo<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>进阶练习：</p><pre class=" language-javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里是个bug，最新浏览器里规定if里不允许包含function</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> c<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>f <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//function/undifined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span><span class="token comment" spellcheck="true">/*GO {  a: undefined, // 100  demo: undefined, // function  f: 123}*/</span><span class="token comment" spellcheck="true">/*AO {  e: undefined, //1,function, 2  b: undefined,  c: undefined, //function  a: undefined}*/</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/webcourse/index.html#course_id=231577&amp;amp;term_id=100273169&amp;amp;taid=14
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（5）- 类型转换</title>
    <link href="http://iqianduan.com/2018/07/02/js-learning-05/"/>
    <id>http://iqianduan.com/2018/07/02/js-learning-05/</id>
    <published>2018-07-02T10:10:00.000Z</published>
    <updated>2018-07-05T10:23:05.805Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/webcourse/index.html#course_id=231577&amp;term_id=100273169&amp;taid=1464734172022937&amp;vid=a14198i8y2h" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h3><ul><li>Number(mix)：把数据类型转换为数字。包括任何类型：<code>Number =&gt; Number</code>、<code>String =&gt; Number or NaN</code>、<code>Boolean =&gt; 0 or 1</code>、<code>Null =&gt; 0</code>、<code>Undefined =&gt; NaN</code>；</li><li>ParseInt(string, radix)：把字符串根据基数转换为十进制整型；没有基数按照十进制转。</li><li>ParseFloat(string)：把字符串转换为浮点型。</li><li>String(mix)：</li><li>Boolean()：</li><li>toString()：<code>Undefined</code>和<code>Null</code>不能使用；</li><li>toString(radix)：把目标进制根据指定基数进行转换；</li></ul><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><ul><li>isNaN()：先把指定类型通过<code>Number(mix)</code>进行转换，然后和<code>NaN</code>进行比对：<code>Number(mix) =&gt; NaN</code>；</li><li>“++” “–”或者”+” “-“：都会转换为<code>Number</code>类型；</li><li>“+”：左右只要有一个类型是<code>String</code>就会转换为<code>String</code>；</li><li>“-“ “*” “/“ “%”：转换为<code>Number</code>；</li><li>“&gt;” “&lt;” “&gt;=” “&lt;=”：<code>Undefined \Null</code> 特殊；</li><li>“&amp;” “||” “!”：<code>Boolean</code>类型转换；</li><li>“==” “!==”： <code>NaN == NaN =&gt; false</code>；</li><li>“===” “!==”：绝对等于或者不等于；</li></ul><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><ul><li>返回6种类型：<code>String</code>、<code>Number</code>、<code>Object</code>、<code>Boolean</code>、<code>Function</code>和<code>Undefined</code>；</li><li>有且只有使用<code>typeof</code>加未定的变量不会报错。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/webcourse/index.html#course_id=231577&amp;amp;term_id=100273169&amp;amp;taid=14
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（4）- 条件语句</title>
    <link href="http://iqianduan.com/2018/06/30/js-learning-04/"/>
    <id>http://iqianduan.com/2018/06/30/js-learning-04/</id>
    <published>2018-06-30T10:18:00.000Z</published>
    <updated>2018-07-05T10:23:29.244Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/webcourse/index.html#course_id=231577&amp;term_id=100273169&amp;taid=1464734172022937&amp;vid=a14198i8y2h" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ul><li>if语句：if(条件){ 执行语句 }</li><li>if… else…</li><li>if…else if…</li><li>for(; ;){循环体}</li><li>while () {}</li><li>do {} while()</li><li>switch…case…break</li><li>break</li><li>continue</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/webcourse/index.html#course_id=231577&amp;amp;term_id=100273169&amp;amp;taid=14
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（3）- 运算符</title>
    <link href="http://iqianduan.com/2018/06/30/js-learning-03/"/>
    <id>http://iqianduan.com/2018/06/30/js-learning-03/</id>
    <published>2018-06-30T08:10:00.000Z</published>
    <updated>2018-07-05T10:23:30.229Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/webcourse/index.html#course_id=231577&amp;term_id=100273169&amp;taid=1464734172022937&amp;vid=a14198i8y2h" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="运算操作符"><a href="#运算操作符" class="headerlink" title="运算操作符"></a>运算操作符</h2><ul><li>“+”<ul><li>数学+运算</li><li>字符串链接</li><li>任何类型 + 字符串的结果都是字符串</li></ul></li><li>“-“、”*”、”/“、”%”、”=”、”()”</li><li>优先级：”()”最高，”=”最弱</li><li>“++”、”–”、”+=”、”-=”、”/=”、”*=”、%=”</li><li>Infinity 、 NaN</li></ul><p>赋值的顺序：自右向左；计算的顺序：自左向右。</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><ul><li>“&gt;”、”&lt;”、”==”、”&gt;=”、”&lt;=”、”!=”</li><li>比较结果为<code>boolean</code>值；</li><li>字符串比较的是ASC码的值大小；</li><li>NaN 不等于任何东西，包括自己。</li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li>“&amp;&amp;”、”||”、”!”</li><li>undefined、null、NaN、””、0、false ==&gt; false</li><li>先看第一表达式转化为布尔值的结果，如果结果为真，那么它会看第二表达式转化为布尔值的结果；然后如果只有两个表达式的话，只看到第二个表达式，就可以返回该表达式的值了。</li><li>&amp;&amp; 结果为假输出假 || 结果为真输出真。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/webcourse/index.html#course_id=231577&amp;amp;term_id=100273169&amp;amp;taid=14
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（2）- 入门</title>
    <link href="http://iqianduan.com/2018/06/28/js-learning-02/"/>
    <id>http://iqianduan.com/2018/06/28/js-learning-02/</id>
    <published>2018-06-28T02:10:00.000Z</published>
    <updated>2018-07-05T10:00:05.331Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/webcourse/index.html#course_id=231577&amp;term_id=100273169&amp;taid=1464734172022937&amp;vid=a14198i8y2h" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="变量申明、赋值"><a href="#变量申明、赋值" class="headerlink" title="变量申明、赋值"></a>变量申明、赋值</h2><ul><li>var a;</li><li>var b = 1;</li></ul><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><ul><li>开头必须是英文字母、_或者$；</li><li>可以包含英文字母、_或者$和数字；</li><li>不能包含关键字、保留字。</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="原始值（stack）–不可改变的原始值"><a href="#原始值（stack）–不可改变的原始值" class="headerlink" title="原始值（stack）–不可改变的原始值"></a>原始值（stack）–不可改变的原始值</h3><ul><li>Number：类型为浮点型</li><li>String：’’ or “”</li><li>Boolean：true/false</li><li>Undefined：定义变量未赋值</li><li>Null：占位</li></ul><h3 id="引用值（heap）"><a href="#引用值（heap）" class="headerlink" title="引用值（heap）"></a>引用值（heap）</h3><ul><li>Arrow：数组</li><li>Object：对象</li><li>Function：函数</li><li>Date：日期</li><li>RegExp：正则表达式</li></ul><p>引用值和原始值的唯一区别是赋值形式的不同。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>语句后面要用分号结束”;”</li><li>书写格式要规范，在赋值符合、运算符合、括号等前后要加一个空格；</li><li>js语法错误会影响后续代码终止，但一个代码块的错误不会影响另一个代码块的执行；</li><li>低级错误（语法解析错误）；</li><li>逻辑错误（标准错误）。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/webcourse/index.html#course_id=231577&amp;amp;term_id=100273169&amp;amp;taid=14
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记（1）- 初识</title>
    <link href="http://iqianduan.com/2018/06/26/js-learning-01/"/>
    <id>http://iqianduan.com/2018/06/26/js-learning-01/</id>
    <published>2018-06-26T08:16:00.000Z</published>
    <updated>2018-07-05T10:17:27.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript学习笔记。本笔记是基于在腾讯课堂《<a href="https://ke.qq.com/webcourse/index.html#course_id=231577&amp;term_id=100273169&amp;taid=1464734172022937&amp;vid=a14198i8y2h" target="_blank" rel="noopener">Web前端开发之JavaScript精英课堂【渡一教育】</a>》课程学习过程中记录的一些提纲和关键点。<br>强烈推荐想要进行js入门学习来听听，尤其是前面姬成讲的基础知识点。</p></blockquote><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ul><li>Livescript</li><li>JScript</li><li>ECMAscript</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>解释型语言</li><li>单线程（轮转时间片）</li></ul><h2 id="构成部分"><a href="#构成部分" class="headerlink" title="构成部分"></a>构成部分</h2><ul><li>ECMAscript</li><li>DOM</li><li>BOM</li></ul><h2 id="执行三部曲"><a href="#执行三部曲" class="headerlink" title="执行三部曲"></a>执行三部曲</h2><ul><li>语法分析：扫描语法错误</li><li>预编译：生成执行期上下文作用域链</li><li>解释执行</li></ul><h2 id="主流浏览器及内核"><a href="#主流浏览器及内核" class="headerlink" title="主流浏览器及内核"></a>主流浏览器及内核</h2><pre><code>IE              //TridentChrome          //Webkit/blinkFireFox         //GeckoOpera           //PrestoSafari          //Webkit</code></pre><h2 id="如何引入JavaScript"><a href="#如何引入JavaScript" class="headerlink" title="如何引入JavaScript"></a>如何引入JavaScript</h2><ul><li><code>&lt;script&gt;&lt;/script&gt;</code></li><li><code>&lt;script src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;JavaScript学习笔记。本笔记是基于在腾讯课堂《&lt;a href=&quot;https://ke.qq.com/webcourse/index.html#course_id=231577&amp;amp;term_id=100273169&amp;amp;taid=14
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="javascript" scheme="http://iqianduan.com/tags/javascript/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Vue Learning</title>
    <link href="http://iqianduan.com/2018/03/12/vue-learning/"/>
    <id>http://iqianduan.com/2018/03/12/vue-learning/</id>
    <published>2018-03-12T03:12:58.000Z</published>
    <updated>2018-04-17T15:55:24.010Z</updated>
    
    <content type="html"><![CDATA[<p>Vue学习笔记和代码记录。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>直接引入链接：建议初学者使用；</li><li>通过node.js的NPM安装Vue；</li><li>通过node.js的NPM安装Vue-cli脚手架（推荐安装方式）；</li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>字符串：title: ‘hello world’；</li><li>数字：num:123；</li><li>数组：arrow: [‘apple’, ‘banana’,’orange’]；</li><li>对象：name: {firstName:’ming’,lastName:’Li’}；</li><li>布尔值：true/false；</li></ul><h3 id="模版数据绑定"><a href="#模版数据绑定" class="headerlink" title="模版数据绑定"></a>模版数据绑定</h3><ul><li>：模版解析；</li><li>v-text：文本绑定；</li><li>v-model：数据双向绑定；v-model.lazy：延迟对数据进行更新；<ul><li>v-model.number：对输入的数据字符串转为数字；</li><li>v-model.trim：对数据进行裁剪，去除空格等</li></ul></li></ul><h3 id="表单数据绑定"><a href="#表单数据绑定" class="headerlink" title="表单数据绑定"></a>表单数据绑定</h3><ul><li>checkbox：储存的数据类型是数组；</li><li>radio：储存的数据类型是字符串；</li><li>select：存储的数据类型是字符串；</li></ul><h3 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h3><ul><li>v-bind：标签属性绑定，属于动态绑定，可以简写为：。绑定后的属性为变量，可以是字符串，数组或者是对象；</li><li>v-if/v-if-else-if/v-else：条件渲染，如果成立则执行，不成立则注销；</li><li>v-show：同样是条件渲染，不同的是不成立是隐藏而不是注销；</li></ul><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul><li>通过v-on:event=”eventName”进行绑定，可简写为@:event=”eventName”;方法通过在methods里进行方法定义；</li><li>在v-on:event.midiflyer添加修改器；</li><li>自定义事件：v-on:diyEvent=”eventName”，通过$emit来触发自定义事件。<code>methods: {my-function () {this.$emit(&#39;diyEvent&#39;), 参数}}</code>；</li></ul><h3 id="计算属性和数据监听"><a href="#计算属性和数据监听" class="headerlink" title="计算属性和数据监听"></a>计算属性和数据监听</h3><ul><li>传值属性：props: [‘xx’,’xx’]。父子组件如果需要传值，必须要在props里进行定义；</li><li>事件属性：methods: {}。所有事件都在这里进行定义；很多情况下在执行事件时需要取消默认事件。function(e){e.preventDefault();}；</li><li>计算属性：computed: {方法 () { return 方法 }}；计算属性的优点：可以直接根据data的属性动态的更改（data中myValue的值变化会同步反映到计算属性里）（计算属性会缓存所依赖的那个值，直到那个值发生变化，否则不会重新取值）与方法调用的缺点：调用方法的时候才会更新，即使data中myValue的值没有变化，调用时依然会去重新取值。使用场景：在耗时、大量搜索的情况下使用，减少dom重复渲染的性能支出。</li><li>创建属性：created:function(){}。方法不需要手动调用，直接执行。</li><li>数据监听：watch: { 方法 () {}}；</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="动态绑定class"><a href="#动态绑定class" class="headerlink" title="动态绑定class"></a>动态绑定class</h4><ul><li>v-bind:class=”{red:true}”；</li><li>v-bind:class={changeClass:changeClass}；</li><li>v-bind:class={active ? true : false}</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul><li>不强制要求按照W3C规则进行命名，但最好遵循。例如：<code>my-template</code>;</li><li>不管组件是大驼峰还是小驼峰，在模版引用的时候一律要转为中横线的命名方式。例如：组件为<code>comName</code>，引用时为：<code>&lt;com-name&gt;&lt;/com-name&gt;</code>；在传递属性时名称也同样。</li></ul><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><ul><li>全局注册：<code>Vue.component(&#39;my-template&#39;, {template: &#39;...&#39;});</code> html：<code>&lt;my-template&gt;&lt;/my-template&gt;</code></li><li>局部注册：只在使用的场景进行注册。<code>var myTemplate = {template: &#39;...&#39;}; new Vue({..., components: {&#39;my-template: myTemplate&#39;}})</code></li></ul><h3 id="模版解析"><a href="#模版解析" class="headerlink" title="模版解析"></a>模版解析</h3><ul><li>特殊标签下的模版需要注意，比如table、ol、ul、select等标签，使用<code>is</code>进行挂载。例如:<code>&lt;table&gt;&lt;tr is=&quot;my-tr&quot;&gt;&lt;/tr&gt;&lt;/table&gt;</code>;</li><li><p>推荐使用字符串模版：</p><ul><li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code>；</li><li>javascript内联模版字符串；</li><li>vue组件；</li></ul></li><li><p>组件中的data必须是函数。</p></li></ul><h3 id="组件组合"><a href="#组件组合" class="headerlink" title="组件组合"></a>组件组合</h3><ul><li>父组件通过prop进行向下传递；</li><li>子组件通过事件进行发送信息，子组件触发事件，父组件进行监听；</li><li>传值时要主要命名的选择和使用，使用props使用的驼峰式明显需要转变为对应的中横线式。<code>Vue.component(&#39;my-template&#39;, {props: [&#39;myMessage&#39;],template: &#39;...&#39;}); &lt;my-template my-message=&quot;hello&quot;&gt;&lt;/my-template&gt;</code></li><li>字面量语法和动态语法；</li><li>slot插槽：父组件向子组件插入template模板，父子之间通过slot属性和name属性进行对应<code>&lt;p slot=&quot;header&quot;&gt;我是header&lt;/p&gt;&lt;span slot=&quot;footer&quot;&gt;我是footer&lt;/span&gt;</code>；</li><li>动态组件：利用 <code>:is = &quot;&quot;</code> 进行组件的动态绑定，外层可以用内置组件keep-alive 来进行缓存；</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>使用组件树设计项目，配置文件链接各个组件-命名转换，动态组件；</li><li>父组件向内传递属性-动态属性；</li><li>子组件向外发布事件；</li><li>slot插槽传递模版 - 具名slot；</li></ul><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="动画：使用transition-内置组件，有css过渡和js过渡两种方式。"><a href="#动画：使用transition-内置组件，有css过渡和js过渡两种方式。" class="headerlink" title="动画：使用transition 内置组件，有css过渡和js过渡两种方式。"></a>动画：使用transition 内置组件，有css过渡和js过渡两种方式。</h3><h4 id="css过渡实现原理：给动画的不同阶段加上不同的class名称。"><a href="#css过渡实现原理：给动画的不同阶段加上不同的class名称。" class="headerlink" title="css过渡实现原理：给动画的不同阶段加上不同的class名称。"></a>css过渡实现原理：给动画的不同阶段加上不同的class名称。</h4><ul><li>四个阶段：v-enter/v-enter-active/v-leave/v-leave-active；使用：<code>&lt;transition name=&quot;fade&quot;&gt;&lt;/transition&gt;</code> .fade-enter/.fade-enter-active/.fade-leave/.fade-leave-active；</li><li>能够接受动画的元素有：v-show/v-if/动态组件加载；</li><li>通过mode=”out-in”/“in-out”实现动画顺序；</li><li>对于多元素模版，如果使用的是同标签名，需要使用key来进行区分；</li></ul><h4 id="js过渡实现原理：通过定义不同的方法来实现动画。"><a href="#js过渡实现原理：通过定义不同的方法来实现动画。" class="headerlink" title="js过渡实现原理：通过定义不同的方法来实现动画。"></a>js过渡实现原理：通过定义不同的方法来实现动画。</h4><p>不同方法名：</p><p><code>&lt;transition v-on:before-enter=&quot;beforeEnter&quot; v-on:enter=&quot;enter&quot; v-on:after-enter=&quot;afterEnter&quot; v-on:enter-cancelled=&quot;enterCancelled&quot; v-on:before-leave=&quot;beforeLeave&quot; v-on:leave=&quot;leave&quot; v-on:after-leave=&quot;afterLeave&quot; v-on:leave-cancelled=&quot;leaveCancelled&quot;&gt; ... &lt;/transition&gt;</code></p><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li>方法：主要有两种：局部定义和全局定义。</li><li>使用：inserted和bind是指令的两个配置属性，属性值是一个函数，所以用es6语法。讲inserted函数，，然后然后回到组件，处理el表示使用了指令的元素对象，还有一个binding对象，其中binding.value表示的是使用了指令元素的指令的值，可以是json，然后借这个json（里面放着css相关信息）所包含的数据来修改dom的样式。</li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>vue-resource： 发送http请求</li><li>vue-router： 前端路由</li><li>引入步骤：<ul><li>入口js文件 import from 插件</li><li>Vue.use(插件) 不过在模块环境中应当始终显式调用 Vue.use() :</li></ul></li></ul><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li>MVC</li><li>MVP</li><li>MVVM</li></ul><h2 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h2><ul><li>Node.js</li><li>NPM</li><li>Mustache</li><li>ECMAscript</li><li>Javascript</li><li>Ajax</li></ul><h2 id="Vue全家桶"><a href="#Vue全家桶" class="headerlink" title="Vue全家桶"></a>Vue全家桶</h2><ul><li>vue.js</li><li>vue-cli</li><li>vue-router</li><li>vue-axios</li><li>vue-lazyload</li></ul><h2 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h2><ul><li>Webpack</li><li>Gulp</li><li>Parcel</li></ul><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li>Css-loader</li><li>Sass-loader</li><li>Vue-style-loader</li><li>Superagent</li></ul><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ul><li>在开发过程中，如果修改了配置文件，需要重新启动，否则报错；</li><li>手写输入的拼写错误问题，一般会提示出来；</li><li>样式文件中的拼写错误，包括属性、值、图片名称，如果找不到也会报错，一般很难找到，所以出现报错的时候一定先要解决！！</li><li>使用webpack要进行loader依赖的安装；</li><li>proxyTable 反向代理设置；</li><li>在组件中template节点下必须只有一个子节点；</li><li>如果采用webpack进行打包管理，如果数据中有需要在js里引用图片地址，需要使用<code>require()</code>的方式进行引用，否则不会被打包到静态文件目录里；</li><li>在组件使用时候先进行数据绑定；</li><li>在使用属性的时候一定记得要添加作用域，比如this；</li><li>在组件或者模版中使用sass或less文件，一定要在style标签上声明lang，否则报错没商量；</li><li>在组件开发过程中，如果需要传参一定记得定义并且在引用的地方调用；</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue学习笔记和代码记录。&lt;/p&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;直接引入链接：建议初学者使用；&lt;/li&gt;&lt;li&gt;通过node.js的NPM安装Vue；&lt;/
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
      <category term="vue" scheme="http://iqianduan.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Sass Learning</title>
    <link href="http://iqianduan.com/2017/09/28/sass-learning/"/>
    <id>http://iqianduan.com/2017/09/28/sass-learning/</id>
    <published>2017-09-28T02:50:18.000Z</published>
    <updated>2018-04-17T15:55:34.938Z</updated>
    
    <content type="html"><![CDATA[<p>学习sass时整理的笔记，记录下来，方便随时巩固。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>页面常用css处理方式</li><li>当前存在哪些不方便的地方</li><li>如果改进？</li></ul><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ul><li>什么是css预处理器</li></ul><blockquote><p>通俗的说，CSS 预处理器用一种专门的编程语言，进行 Web 页面样式设计，然后再编译成正常的 CSS 文件，以供项目使用。</p></blockquote><ul><li><p>常见css预处理器有哪些</p><ul><li>sass|scss</li><li>less</li><li>stylus</li><li>…</li></ul></li><li><p>各有什么不同</p></li><li>为什么用css预处理器<ul><li>更加简洁</li><li>适应性更强</li><li>可读性更佳</li><li>更易于代码维护和更新</li></ul></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>了解sass的两种不同格式：.sass和.scss；</li><li>了解编译环境，最简单的就是在dos下的sass直接编译，或者用compass，gulp、webpack、UEB等等；</li><li>了解各种编译环境的操作命令和各种参数；</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>sass安装需要依赖ruby，所以先要安装ruby，在官网下载直接next，完成后在ruby目录下打开任务窗，键入<code>ruby -v</code>查看是否安装成功。</li><li>如果ruby安装成功，直接使用gem的方式安装sass，<code>gem install sass</code> 默认是用墙外的程序，如果安装失败，可以使用淘宝的镜像安装；键入<code>sass -v</code>查看是否安装成功。</li><li>顺便可以把compass安装，<code>gem install compass</code> ，后期可能会用到。</li></ul><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ul><li><p>注释：//和/**/</p><ul><li>// XXXXXXXXXXXXXXX</li><li>//—————————-</li><li>/* XXXXXXXXXXXXXXX</li><li><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong>/</li></ul></li><li><p>语法</p></li><li><p>变量</p><ul><li>普通变量：<code>$bgColor:#fff; body {background-color:$bgColor;}</code></li><li>默认变量：<code>$bgColor:#fff !default; body {background-color:$bgColor;}</code></li><li>特殊变量：#{$variables} –进阶</li><li>多值变量：list和map – 高级</li></ul></li><li><p>嵌套</p><ul><li>选择器嵌套</li><li>属性嵌套</li><li>伪类、伪元素嵌套</li></ul></li><li><p>选择器(&amp;)</p><ul><li>&amp;</li></ul></li><li><p>编译</p><ul><li>sass</li><li>compass</li><li>kola</li><li>gulp</li><li>webpack</li><li>UEB</li><li>…</li></ul></li><li><p>编码规范</p><ul><li>遵循css的规范</li><li>拒绝使用ID</li><li>避免不必要的嵌套和多层嵌套</li></ul></li></ul><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><ul><li><p>运算</p><ul><li>加法(+)：不允许不同单位间相加；</li><li>减法(-) ：同上；</li><li>乘法(*) ：只允许出现一个单位；</li><li>除法(/) ：同上；要用()括起来；</li><li>颜色运算：<code>p {color: #010203 + #040506;} p {color: #112233 * 2;}</code></li><li>字符运算：<code>$content: &quot;Hello&quot; + &quot;&quot; + &quot;Sass!&quot;;</code></li></ul></li><li><p>混合</p><ul><li>定义：@mixin</li><li>调用：@include</li><li>常规</li><li>带参数</li><li>带多个参数</li><li>结合函数或者循环的片段</li><li>优势与不足</li></ul></li><li><p>继承</p><ul><li>调用：@extend</li><li>优势与不足</li></ul></li><li><p>占位</p><ul><li>定义：%</li><li>调用：@extend</li><li>优势与不足</li></ul></li><li><p>导入：@import ‘’;</p></li><li>&amp; or @at-root #{&amp;} 。&amp;和#{&amp;}区别：&amp;代表源选择器，也当作一种标签选择器，可以继承，但只能放在开始位置；#{&amp;} 可以引用父（引用父选择器）和插值，可以嵌套，也可以放在任何位置。</li></ul><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><ul><li><p>值列表</p><ul><li>nth函数（nth function） 可以直接访问值列表中的某一项；</li><li>join函数（join function） 可以将多个值列表连结在一起；</li><li>append函数（append function） 可以在值列表中添加值；</li><li>@each规则（@each rule） 则能够给值列表中的每个项目添加样式。</li></ul></li><li><p>函数</p></li><li><p>条件判断</p><ul><li>三目判断</li></ul></li><li><p>循环</p><ul><li>@for循环</li><li>@each循环</li><li>list循环</li><li>map数据循环</li></ul></li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li>gbk和utf-8</li><li>中文路径的问题</li></ul><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">SASS用法指南</a></li><li><a href="http://www.w3cplus.com/css/css-preprocessor-sass-vs-less-stylus-2.html" target="_blank" rel="noopener">CSS预处理器——Sass、LESS和Stylus实践【未删减版】</a></li><li><a href="http://www.cnblogs.com/yizihan/p/4427900.html" target="_blank" rel="noopener">Sass和Compass入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习sass时整理的笔记，记录下来，方便随时巩固。&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;页面常用css处理方式&lt;/li&gt;&lt;li&gt;当前存在哪些不方便的地方&lt;
      
    
    </summary>
    
    
      <category term="code" scheme="http://iqianduan.com/tags/code/"/>
    
      <category term="note" scheme="http://iqianduan.com/tags/note/"/>
    
      <category term="scss" scheme="http://iqianduan.com/tags/scss/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://iqianduan.com/2017/06/01/hello-world/"/>
    <id>http://iqianduan.com/2017/06/01/hello-world/</id>
    <published>2017-06-01T02:58:58.000Z</published>
    <updated>2018-04-04T02:59:10.695Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
