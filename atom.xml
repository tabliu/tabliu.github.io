<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大踏步走</title>
  
  <subtitle>Tabliu&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.iqianduan.com/"/>
  <updated>2018-04-17T15:55:24.010Z</updated>
  <id>http://www.iqianduan.com/</id>
  
  <author>
    <name>Tabliu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue Learning</title>
    <link href="http://www.iqianduan.com/2018/03/12/vue-learning/"/>
    <id>http://www.iqianduan.com/2018/03/12/vue-learning/</id>
    <published>2018-03-12T03:12:58.000Z</published>
    <updated>2018-04-17T15:55:24.010Z</updated>
    
    <content type="html"><![CDATA[<p>Vue学习笔记和代码记录。</p><h2>安装</h2><ul><li>直接引入链接：建议初学者使用；</li><li>通过node.js的NPM安装Vue；</li><li>通过node.js的NPM安装Vue-cli脚手架（推荐安装方式）；</li></ul><h2>基础</h2><h3>数据类型</h3><ul><li>字符串：title: 'hello world'；</li><li>数字：num:123；</li><li>数组：arrow: ['apple', 'banana','orange']；</li><li>对象：name: {firstName:'ming',lastName:'Li'}；</li><li>布尔值：true/false；</li></ul><h3>模版数据绑定</h3><ul><li>：模版解析；</li><li>v-text：文本绑定；</li><li>v-model：数据双向绑定；v-model.lazy：延迟对数据进行更新；<ul><li>v-model.number：对输入的数据字符串转为数字；</li><li>v-model.trim：对数据进行裁剪，去除空格等</li></ul></li></ul><h3>表单数据绑定</h3><ul><li>checkbox：储存的数据类型是数组；</li><li>radio：储存的数据类型是字符串；</li><li>select：存储的数据类型是字符串；</li></ul><h3>标签属性</h3><ul><li>v-bind：标签属性绑定，属于动态绑定，可以简写为：。绑定后的属性为变量，可以是字符串，数组或者是对象；</li><li>v-if/v-if-else-if/v-else：条件渲染，如果成立则执行，不成立则注销；</li><li>v-show：同样是条件渲染，不同的是不成立是隐藏而不是注销；</li></ul><h3>事件绑定</h3><ul><li>通过v-on:event=&quot;eventName&quot;进行绑定，可简写为@:event=&quot;eventName&quot;;方法通过在methods里进行方法定义；</li><li>在v-on:event.midiflyer添加修改器；</li><li>自定义事件：v-on:diyEvent=&quot;eventName&quot;，通过$emit来触发自定义事件。<code>methods: {my-function () {this.$emit('diyEvent'), 参数}}</code>；</li></ul><h3>计算属性和数据监听</h3><ul><li>传值属性：props: ['xx','xx']。父子组件如果需要传值，必须要在props里进行定义；</li><li>事件属性：methods: {}。所有事件都在这里进行定义；很多情况下在执行事件时需要取消默认事件。function(e){e.preventDefault();}；</li><li>计算属性：computed: {方法 () { return 方法 }}；计算属性的优点：可以直接根据data的属性动态的更改（data中myValue的值变化会同步反映到计算属性里）（计算属性会缓存所依赖的那个值，直到那个值发生变化，否则不会重新取值）与方法调用的缺点：调用方法的时候才会更新，即使data中myValue的值没有变化，调用时依然会去重新取值。使用场景：在耗时、大量搜索的情况下使用，减少dom重复渲染的性能支出。</li><li>创建属性：created:function(){}。方法不需要手动调用，直接执行。</li><li>数据监听：watch: { 方法 () {}}；</li></ul><h3>应用</h3><h4>动态绑定class</h4><ul><li>v-bind:class=&quot;{red:true}&quot;；</li><li>v-bind:class={changeClass:changeClass}；</li><li>v-bind:class={active ? true : false}</li></ul><h2>组件</h2><h3>命名</h3><ul><li>不强制要求按照W3C规则进行命名，但最好遵循。例如：<code>my-template</code>;</li><li>不管组件是大驼峰还是小驼峰，在模版引用的时候一律要转为中横线的命名方式。例如：组件为<code>comName</code>，引用时为：<code>&lt;com-name&gt;&lt;/com-name&gt;</code>；在传递属性时名称也同样。</li></ul><h3>注册</h3><ul><li>全局注册：<code>Vue.component('my-template', {template: '...'});</code>  html：<code>&lt;my-template&gt;&lt;/my-template&gt;</code></li><li>局部注册：只在使用的场景进行注册。<code>var myTemplate = {template: '...'}; new Vue({..., components: {'my-template: myTemplate'}})</code></li></ul><h3>模版解析</h3><ul><li>特殊标签下的模版需要注意，比如table、ol、ul、select等标签，使用<code>is</code>进行挂载。例如:<code>&lt;table&gt;&lt;tr is=&quot;my-tr&quot;&gt;&lt;/tr&gt;&lt;/table&gt;</code>;</li><li>推荐使用字符串模版：</li></ul><ul><li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code>；</li><li>javascript内联模版字符串；</li><li>vue组件；</li></ul><ul><li>组件中的data必须是函数。</li></ul><h3>组件组合</h3><ul><li>父组件通过prop进行向下传递；</li><li>子组件通过事件进行发送信息，子组件触发事件，父组件进行监听；</li><li>传值时要主要命名的选择和使用，使用props使用的驼峰式明显需要转变为对应的中横线式。<code>Vue.component('my-template', {props: ['myMessage'],template: '...'}); &lt;my-template my-message=&quot;hello&quot;&gt;&lt;/my-template&gt;</code></li><li>字面量语法和动态语法；</li><li>slot插槽：父组件向子组件插入template模板，父子之间通过slot属性和name属性进行对应<code>&lt;p slot=&quot;header&quot;&gt;我是header&lt;/p&gt;&lt;span slot=&quot;footer&quot;&gt;我是footer&lt;/span&gt;</code>；</li><li>动态组件：利用 <code>:is = &quot;&quot;</code> 进行组件的动态绑定，外层可以用内置组件keep-alive 来进行缓存；</li></ul><h3>总结</h3><ul><li>使用组件树设计项目，配置文件链接各个组件-命名转换，动态组件；</li><li>父组件向内传递属性-动态属性；</li><li>子组件向外发布事件；</li><li>slot插槽传递模版 - 具名slot；</li></ul><h2>高级用法</h2><h3>动画：使用transition 内置组件，有css过渡和js过渡两种方式。</h3><h4>css过渡实现原理：给动画的不同阶段加上不同的class名称。</h4><ul><li>四个阶段：v-enter/v-enter-active/v-leave/v-leave-active；使用：<code>&lt;transition name=&quot;fade&quot;&gt;&lt;/transition&gt;</code>  .fade-enter/.fade-enter-active/.fade-leave/.fade-leave-active；</li><li>能够接受动画的元素有：v-show/v-if/动态组件加载；</li><li>通过mode=&quot;out-in&quot;/&quot;in-out&quot;实现动画顺序；</li><li>对于多元素模版，如果使用的是同标签名，需要使用key来进行区分；</li></ul><h4>js过渡实现原理：通过定义不同的方法来实现动画。</h4><p>不同方法名：</p><p><code>&lt;transition  v-on:before-enter=&quot;beforeEnter&quot;  v-on:enter=&quot;enter&quot;  v-on:after-enter=&quot;afterEnter&quot;  v-on:enter-cancelled=&quot;enterCancelled&quot;  v-on:before-leave=&quot;beforeLeave&quot;  v-on:leave=&quot;leave&quot;  v-on:after-leave=&quot;afterLeave&quot;  v-on:leave-cancelled=&quot;leaveCancelled&quot;&gt; ... &lt;/transition&gt;</code></p><h3>自定义指令</h3><ul><li>方法：主要有两种：局部定义和全局定义。</li><li>使用：inserted和bind是指令的两个配置属性，属性值是一个函数，所以用es6语法。讲inserted函数，，然后然后回到组件，处理el表示使用了指令的元素对象，还有一个binding对象，其中binding.value表示的是使用了指令元素的指令的值，可以是json，然后借这个json（里面放着css相关信息）所包含的数据来修改dom的样式。</li></ul><h3>插件</h3><ul><li>vue-resource： 发送http请求</li><li>vue-router：   前端路由</li><li>引入步骤：<ul><li>入口js文件 import  from  插件</li><li>Vue.use(插件)  不过在模块环境中应当始终显式调用 Vue.use() :</li></ul></li></ul><h2>相关概念</h2><ul><li>MVC</li><li>MVP</li><li>MVVM</li></ul><h2>相关知识点</h2><ul><li>Node.js</li><li>NPM</li><li>Mustache</li><li>ECMAscript</li><li>Javascript</li><li>Ajax</li></ul><h2>Vue全家桶</h2><ul><li>vue.js</li><li>vue-cli</li><li>vue-router</li><li>vue-axios</li><li>vue-lazyload</li></ul><h2>打包工具</h2><ul><li>Webpack</li><li>Gulp</li><li>Parcel</li></ul><h2>安装依赖</h2><ul><li>Css-loader</li><li>Sass-loader</li><li>Vue-style-loader</li><li>Superagent</li></ul><h2>踩坑</h2><ul><li>在开发过程中，如果修改了配置文件，需要重新启动，否则报错；</li><li>手写输入的拼写错误问题，一般会提示出来；</li><li>样式文件中的拼写错误，包括属性、值、图片名称，如果找不到也会报错，一般很难找到，所以出现报错的时候一定先要解决！！</li><li>使用webpack要进行loader依赖的安装；</li><li>proxyTable 反向代理设置；</li><li>在组件中template节点下必须只有一个子节点；</li><li>如果采用webpack进行打包管理，如果数据中有需要在js里引用图片地址，需要使用<code>require()</code>的方式进行引用，否则不会被打包到静态文件目录里；</li><li>在组件使用时候先进行数据绑定；</li><li>在使用属性的时候一定记得要添加作用域，比如this；</li><li>在组件或者模版中使用sass或less文件，一定要在style标签上声明lang，否则报错没商量；</li><li>在组件开发过程中，如果需要传参一定记得定义并且在引用的地方调用；</li></ul><h2>参考资料</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue学习笔记和代码记录。&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;直接引入链接：建议初学者使用；&lt;/li&gt;
&lt;li&gt;通过node.js的NPM安装Vue；&lt;/li&gt;
&lt;li&gt;通过node.js的NPM安装Vue-cli脚手架（推荐安装方式）；&lt;/li&gt;
&lt;/ul
      
    
    </summary>
    
    
      <category term="code" scheme="http://www.iqianduan.com/tags/code/"/>
    
      <category term="note" scheme="http://www.iqianduan.com/tags/note/"/>
    
      <category term="vue" scheme="http://www.iqianduan.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Sass Learning</title>
    <link href="http://www.iqianduan.com/2017/09/28/sass-learning/"/>
    <id>http://www.iqianduan.com/2017/09/28/sass-learning/</id>
    <published>2017-09-28T02:50:18.000Z</published>
    <updated>2018-04-17T15:55:34.938Z</updated>
    
    <content type="html"><![CDATA[<p>学习sass时整理的笔记，记录下来，方便随时巩固。</p><h2>前言</h2><ul><li>页面常用css处理方式</li><li>当前存在哪些不方便的地方</li><li>如果改进？</li></ul><h2>引入</h2><ul><li>什么是css预处理器</li></ul><blockquote><p>通俗的说，CSS 预处理器用一种专门的编程语言，进行 Web 页面样式设计，然后再编译成正常的 CSS 文件，以供项目使用。</p></blockquote><ul><li><p>常见css预处理器有哪些</p><ul><li>sass|scss</li><li>less</li><li>stylus</li><li>...</li></ul></li><li><p>各有什么不同</p></li><li><p>为什么用css预处理器</p><ul><li>更加简洁</li><li>适应性更强</li><li>可读性更佳</li><li>更易于代码维护和更新</li></ul></li></ul><h2>介绍</h2><ul><li>了解sass的两种不同格式：.sass和.scss；</li><li>了解编译环境，最简单的就是在dos下的sass直接编译，或者用compass，gulp、webpack、UEB等等；</li><li>了解各种编译环境的操作命令和各种参数；</li></ul><h2>安装</h2><ul><li>sass安装需要依赖ruby，所以先要安装ruby，在官网下载直接next，完成后在ruby目录下打开任务窗，键入<code>ruby -v</code>查看是否安装成功。</li><li>如果ruby安装成功，直接使用gem的方式安装sass，<code>gem install sass</code>  默认是用墙外的程序，如果安装失败，可以使用淘宝的镜像安装；键入<code>sass -v</code>查看是否安装成功。</li><li>顺便可以把compass安装，<code>gem install compass</code>   ，后期可能会用到。</li></ul><h2>入门</h2><ul><li><p>注释：//和/**/</p><ul><li>// XXXXXXXXXXXXXXX</li><li>//----------------------------</li><li>/* XXXXXXXXXXXXXXX</li><li>*************************/</li></ul></li><li><p>语法</p></li><li><p>变量</p><ul><li>普通变量：<code>$bgColor:#fff; body {background-color:$bgColor;}</code></li><li>默认变量：<code>$bgColor:#fff !default; body {background-color:$bgColor;}</code></li><li>特殊变量：#{$variables} --进阶</li><li>多值变量：list和map -- 高级</li></ul></li><li><p>嵌套</p><ul><li>选择器嵌套</li><li>属性嵌套</li><li>伪类、伪元素嵌套</li></ul></li><li><p>选择器(&amp;)</p><ul><li>&amp;</li></ul></li><li><p>编译</p><ul><li>sass</li><li>compass</li><li>kola</li><li>gulp</li><li>webpack</li><li>UEB</li><li>...</li></ul></li><li><p>编码规范</p><ul><li>遵循css的规范</li><li>拒绝使用ID</li><li>避免不必要的嵌套和多层嵌套</li></ul></li></ul><h2>进阶</h2><ul><li><p>运算</p><ul><li>加法(+)：不允许不同单位间相加；</li><li>减法(-) ：同上；</li><li>乘法(*) ：只允许出现一个单位；</li><li>除法(/) ：同上；要用()括起来；</li><li>颜色运算：<code>p {color: #010203 + #040506;} p {color: #112233 * 2;}</code></li><li>字符运算：<code>$content: &quot;Hello&quot; + &quot;&quot; + &quot;Sass!&quot;;</code></li></ul></li><li><p>混合</p><ul><li>定义：@mixin</li><li>调用：@include</li><li>常规</li><li>带参数</li><li>带多个参数</li><li>结合函数或者循环的片段</li><li>优势与不足</li></ul></li><li><p>继承</p><ul><li>调用：@extend</li><li>优势与不足</li></ul></li><li><p>占位</p><ul><li>定义：%</li><li>调用：@extend</li><li>优势与不足</li></ul></li><li><p>导入：@import '';</p></li><li><p>&amp;  or  @at-root #{&amp;} 。&amp;和#{&amp;}区别：&amp;代表源选择器，也当作一种标签选择器，可以继承，但只能放在开始位置；#{&amp;} 可以引用父（引用父选择器）和插值，可以嵌套，也可以放在任何位置。</p></li></ul><h2>高级</h2><ul><li><p>值列表</p><ul><li>nth函数（nth function） 可以直接访问值列表中的某一项；</li><li>join函数（join function） 可以将多个值列表连结在一起；</li><li>append函数（append function） 可以在值列表中添加值；</li><li>@each规则（@each rule） 则能够给值列表中的每个项目添加样式。</li></ul></li><li><p>函数</p></li><li><p>条件判断</p><ul><li>三目判断</li></ul></li><li><p>循环</p><ul><li>@for循环</li><li>@each循环</li><li>list循环</li><li>map数据循环</li></ul></li></ul><h2>常见问题</h2><ul><li>gbk和utf-8</li><li>中文路径的问题</li></ul><h2>参考内容</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">SASS用法指南</a></li><li><a href="http://www.w3cplus.com/css/css-preprocessor-sass-vs-less-stylus-2.html" target="_blank" rel="noopener">CSS预处理器——Sass、LESS和Stylus实践【未删减版】</a></li><li><a href="http://www.cnblogs.com/yizihan/p/4427900.html" target="_blank" rel="noopener">Sass和Compass入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习sass时整理的笔记，记录下来，方便随时巩固。&lt;/p&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;页面常用css处理方式&lt;/li&gt;
&lt;li&gt;当前存在哪些不方便的地方&lt;/li&gt;
&lt;li&gt;如果改进？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;引入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什么是cs
      
    
    </summary>
    
    
      <category term="code" scheme="http://www.iqianduan.com/tags/code/"/>
    
      <category term="note" scheme="http://www.iqianduan.com/tags/note/"/>
    
      <category term="scss" scheme="http://www.iqianduan.com/tags/scss/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.iqianduan.com/2017/06/01/hello-world/"/>
    <id>http://www.iqianduan.com/2017/06/01/hello-world/</id>
    <published>2017-06-01T02:58:58.000Z</published>
    <updated>2018-04-04T02:59:10.695Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2>Quick Start</h2><h3>Create a new post</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3>Run server</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3>Generate static files</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3>Deploy to remote sites</h3><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
